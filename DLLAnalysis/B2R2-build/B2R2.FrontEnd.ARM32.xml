<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>B2R2.FrontEnd.ARM32</name></assembly>
<members>
<member name="P:B2R2.FrontEnd.ARM32.InsInfo.Cflag">
<summary>
 Carry Flag from decoding instruction
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.InsInfo.Mode">
<summary>
 Target architecture mode.
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.InsInfo.SIMDTyp">
<summary>
 SIMD data type.
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.InsInfo.Qualifier">
<summary>
 Qualifier.
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.InsInfo.WriteBack">
<summary>
 Write back.
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.InsInfo.ITState">
<summary>
 IT state for this instruction (used only for IT instructions).
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.InsInfo.Operands">
<summary>
 Operands.
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.InsInfo.Opcode">
<summary>
 Opcode.
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.InsInfo.Condition">
<summary>
 Condition.
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.InsInfo.NumBytes">
<summary>
 Number of bytes.
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.InsInfo.Address">
<summary>
 Address.
</summary>
</member>
<member name="T:B2R2.FrontEnd.ARM32.InsInfo">
<summary>
 Basic information for a single ARMv7 instruction obtained after parsing.
</summary>
</member>
<member name="T:B2R2.FrontEnd.ARM32.SIMDFPRegister">
<summary>
 V{&lt;modifier&gt;}&lt;operation&gt;{&lt;shape&gt;}{&lt;c&gt;}{&lt;q&gt;}{.&lt;dt&gt;} {&lt;dest&gt;,} &lt;src1&gt;, &lt;src2&gt;
</summary>
</member>
<member name="T:B2R2.FrontEnd.ARM32.SIMDDataType">
<summary>
 A2.6.3 Data types supported by the Advanced SIMD Extension
</summary>
</member>
<member name="T:B2R2.FrontEnd.ARM32.Qualifier.N">
<summary>
 Narrow.
</summary>
</member>
<member name="T:B2R2.FrontEnd.ARM32.Qualifier.W">
<summary>
 Wide.
</summary>
</member>
<member name="T:B2R2.FrontEnd.ARM32.Qualifier">
<summary>
 A8.2 Standard assembler syntax fields
</summary>
</member>
<member name="T:B2R2.FrontEnd.ARM32.R">
<summary>
 Shortcut for Register type.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.FPSCR">
<summary>
 FPSCR, Floating-point Status and Control Register, VMSA.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.NSACR">
<summary>
 Non-Secure Access Control Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SCTLR">
<summary>
 System Control register
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SCR">
<summary>
 Secure Configuration Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SPSR">
<summary>
 Saved Program Status Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.CPSR">
<summary>
 Current Program Status Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.APSR">
<summary>
 Application Program Status Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SPSRfiq">
<summary>
 SPSRfiq.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.LRfiq">
<summary>
 LRfiq.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SPfiq">
<summary>
 SPfiq.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R12fiq">
<summary>
 R12fiq.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R11fiq">
<summary>
 R11fiq.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R10fiq">
<summary>
 R10fiq.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R9fiq">
<summary>
 R9fiq.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R8fiq">
<summary>
 R8fiq.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SPSRirq">
<summary>
 SPSRirq.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.LRirq">
<summary>
 LRirq.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SPirq">
<summary>
 SPirq.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SPSRmon">
<summary>
 SPSRmon.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.LRmon">
<summary>
 LRmon.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SPmon">
<summary>
 SPmon.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SPSRund">
<summary>
 SPSRund.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.LRund">
<summary>
 LRund.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SPund">
<summary>
 SPund.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SPSRabt">
<summary>
 SPSRabt.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.LRabt">
<summary>
 LRabt.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SPabt">
<summary>
 SPabt.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SPSRsvc">
<summary>
 SPSRsvc.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.LRsvc">
<summary>
 LRsvc.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SPsvc">
<summary>
 SPsvc.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.ELRhyp">
<summary>
 ELRhyp.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SPSRhyp">
<summary>
 SPSRhyp.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SPhyp">
<summary>
 SPhyp.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.LRusr">
<summary>
 LRusr.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SPusr">
<summary>
 SPusr.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R12usr">
<summary>
 R12usr.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R11usr">
<summary>
 R11usr.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R10usr">
<summary>
 R10usr.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R9usr">
<summary>
 R9usr.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R8usr">
<summary>
 R8usr.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.P15">
<summary>
 P15.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.P14">
<summary>
 P14.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.P13">
<summary>
 P13.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.P12">
<summary>
 P12.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.P11">
<summary>
 P11.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.P10">
<summary>
 P10.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.P9">
<summary>
 P9.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.P8">
<summary>
 P8.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.P7">
<summary>
 P7.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.P6">
<summary>
 P6.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.P5">
<summary>
 P5.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.P4">
<summary>
 P4.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.P3">
<summary>
 P3.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.P2">
<summary>
 P2.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.P1">
<summary>
 P1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.P0">
<summary>
 P0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.C15">
<summary>
 C15.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.C14">
<summary>
 C14.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.C13">
<summary>
 C13.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.C12">
<summary>
 C12.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.C11">
<summary>
 C11.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.C10">
<summary>
 C10.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.C9">
<summary>
 C9.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.C8">
<summary>
 C8.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.C7">
<summary>
 C7.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.C6">
<summary>
 C6.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.C5">
<summary>
 C5.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.C4">
<summary>
 C4.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.C3">
<summary>
 C3.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.C2">
<summary>
 C2.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.C1">
<summary>
 C1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.C0">
<summary>
 C0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.Q15">
<summary>
 Q15.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.Q14">
<summary>
 Q14.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.Q13">
<summary>
 Q13.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.Q12">
<summary>
 Q12.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.Q11">
<summary>
 Q11.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.Q10">
<summary>
 Q10.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.Q9">
<summary>
 Q9.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.Q8">
<summary>
 Q8.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.Q7">
<summary>
 Q7.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.Q6">
<summary>
 Q6.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.Q5">
<summary>
 Q5.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.Q4">
<summary>
 Q4.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.Q3">
<summary>
 Q3.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.Q2">
<summary>
 Q2.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.Q1">
<summary>
 Q1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.Q0">
<summary>
 Q0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.MVFR1">
<summary>
 MVFR1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.MVFR0">
<summary>
 MVFR0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.FPINST2">
<summary>
 FPINST2.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D31">
<summary>
 D31.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D30">
<summary>
 D30.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D29">
<summary>
 D29.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D28">
<summary>
 D28.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D27">
<summary>
 D27.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D26">
<summary>
 D26.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D25">
<summary>
 D25.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D24">
<summary>
 D24.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D23">
<summary>
 D23.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D22">
<summary>
 D22.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D21">
<summary>
 D21.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D20">
<summary>
 D20.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D19">
<summary>
 D19.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D18">
<summary>
 D18.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D17">
<summary>
 D17.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D16">
<summary>
 D16.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D15">
<summary>
 D15.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D14">
<summary>
 D14.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D13">
<summary>
 D13.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D12">
<summary>
 D12.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D11">
<summary>
 D11.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D10">
<summary>
 D10.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D9">
<summary>
 D9.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D8">
<summary>
 D8.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D7">
<summary>
 D7.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D6">
<summary>
 D6.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D5">
<summary>
 D5.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D4">
<summary>
 D4.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D3">
<summary>
 D3.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D2">
<summary>
 D2.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D1">
<summary>
 D1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.D0">
<summary>
 D0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S31">
<summary>
 S31.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S30">
<summary>
 S30.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S29">
<summary>
 S29.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S28">
<summary>
 S28.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S27">
<summary>
 S27.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S26">
<summary>
 S26.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S25">
<summary>
 S25.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S24">
<summary>
 S24.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S23">
<summary>
 S23.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S22">
<summary>
 S22.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S21">
<summary>
 S21.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S20">
<summary>
 S20.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S19">
<summary>
 S19.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S18">
<summary>
 S18.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S17">
<summary>
 S17.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S16">
<summary>
 S16.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S15">
<summary>
 S15.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S14">
<summary>
 S14.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S13">
<summary>
 S13.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S12">
<summary>
 S12.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S11">
<summary>
 S11.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S10">
<summary>
 S10.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S9">
<summary>
 S9.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S8">
<summary>
 S8.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S7">
<summary>
 S7.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S6">
<summary>
 S6.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S5">
<summary>
 S5.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S4">
<summary>
 S4.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S3">
<summary>
 S3.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S2">
<summary>
 S2.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S1">
<summary>
 S1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.S0">
<summary>
 S0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.PC">
<summary>
 PC, the program counter.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.LR">
<summary>
 LR, the link register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SP">
<summary>
 SP, the stack pointer.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.IP">
<summary>
 IP.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.FP">
<summary>
 FP.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SL">
<summary>
 SL.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.SB">
<summary>
 SB.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R8">
<summary>
 R8.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R7">
<summary>
 R7.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R6">
<summary>
 R6.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R5">
<summary>
 R5.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R4">
<summary>
 R4.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R3">
<summary>
 R3.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R2">
<summary>
 R2.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R1">
<summary>
 R1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Register.R0">
<summary>
 R0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.InvalidOP">
<summary>
 Invalid Opcode.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.YIELD">
<summary>
 Yield hint
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.WFI">
<summary>
 Wait For Interrupt hint.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.WFE">
<summary>
 Wait For Event hint.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VZIP">
<summary>
 Vector Zip.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VUZP">
<summary>
 Vector Unzip.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VTST">
<summary>
 Vector Test Bits.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VTRN">
<summary>
 Vector Transpose.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VTBX">
<summary>
 Vector Table Extension.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VTBL">
<summary>
 Vector Table Lookup.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VSWP">
<summary>
 Vector Swap.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VSUBW">
<summary>
 Vector Subtract Wide.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VSUBL">
<summary>
 Vector Subtract Long.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VSUBHN">
<summary>
 Vector Subtract and Narrow, returning High Half.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VSUB">
<summary>
 Vector Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VSTR">
<summary>
 Vector Store Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VSTMIA">
<summary>
 Vector Store Multiple. Increment After
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VSTMDB">
<summary>
 Vector Store Multiple. Decrement Before.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VSTM">
<summary>
 Vector Store Multiple.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VST4">
<summary>
 Vector Store. (multiple 4-element structures).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VST3">
<summary>
 Vector Store. (multiple 3-element structures).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VST2">
<summary>
 Vector Store. (multiple 2-element structures).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VST1">
<summary>
 Vector Store. (multiple single elements).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VSRI">
<summary>
 Vector Shift Right and Insert.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VSRA">
<summary>
 Vector Shift Right and Accumulate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VSQRT">
<summary>
 Vector Square Root.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VSLI">
<summary>
 Vector Shift Left and Insert.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VSHRN">
<summary>
 Vector Shift Right Narrow.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VSHR">
<summary>
 Vector Shift Right.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VSHLL">
<summary>
 Vector Shift Left Long.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VSHL">
<summary>
 Vector Shift Left.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VRSUBHN">
<summary>
 Vector Rounding Subtract and Narrow, returning High Half.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VRSRA">
<summary>
 Vector Rounding Shift Right and Accumulate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VRSQRTS">
<summary>
 Vector Reciprocal Square Root Step.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VRSQRTE">
<summary>
 Vector Reciprocal Square Root Estimate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VRSHRN">
<summary>
 Vector Rounding Shift Right Narrow.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VRSHR">
<summary>
 Vector Rounding Shift Right.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VRSHL">
<summary>
 Vector Rounding Shift Left.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VRINTZ">
<summary>
 Vector round floating-point to integer towards Zero.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VRINTX">
<summary>
 Vector round floating-point to integer to nearest signaling inexactness.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VRINTP">
<summary>
 Vector Round floating-point to integer towards Plus Infinity.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VRINTN">
<summary>
 Vector Round floating-point to integer to Nearest.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VRINTM">
<summary>
 Vector Round floating-point to integer towards Minus Infinity.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VRINTA">
<summary>
 Vector Round floating-point to integer towards Nearest with Ties to Away.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VRHADD">
<summary>
 Vector Rounding Halving Add
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VREV64">
<summary>
 Vector Reverse in doublewords.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VREV32">
<summary>
 Vector Reverse in words.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VREV16">
<summary>
 Vector Reverse in halfwords.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VRECPS">
<summary>
 Vector Reciprocal Step.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VRECPE">
<summary>
 Vector Reciprocal Estimate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VRADDHN">
<summary>
 Vector Rounding Add and Narrow, returning High Half.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQSUB">
<summary>
 Vector Saturating Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQSHRUN">
<summary>
 Vector Saturating Shift Right, Narrow.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQSHRN">
<summary>
 Vector Saturating Shift Right, Narrow.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQSHLU">
<summary>
 Vector Saturating Shift Left.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQSHL">
<summary>
 Vector Saturating Shift Left.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQRSHRUN">
<summary>
 Vector Saturating Shift Right, Rounded Unsigned Narrow.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQRSHRN">
<summary>
 Vector Saturating Shift Right, Rounded Unsigned Narrow.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQRSHL">
<summary>
 Vector Saturating Rounding Shift Left.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQRDMULH">
<summary>
 Vector Saturating Rounding Doubling Multiply returning High Half.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQNEG">
<summary>
 Vector Saturating Negate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQMOVUN">
<summary>
 Vector Saturating Move and Unsigned Narrow (op = 0b01).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQMOVN">
<summary>
 Vector Saturating Move and Unsigned Narrow (op &lt;&gt; 0b01).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQDMULL">
<summary>
 Vector Saturating Doubling Multiply Long.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQDMULH">
<summary>
 Vector Saturating Doubling Multiply returning High Half.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQDMLSL">
<summary>
 Vector Saturating Doubling Multiply Subtract Long.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQDMLAL">
<summary>
 Vector Saturating Doubling Multiply Accumulate Long.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQADD">
<summary>
 Vector Saturating Add.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VQABS">
<summary>
 Vector Saturating Absolute.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VPUSH">
<summary>
 Vector Push Registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VPOP">
<summary>
 Vector Pop Registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VPMIN">
<summary>
 Vector Pairwise Minimum.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VPMAX">
<summary>
 Vector Pairwise Maximum.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VPADDL">
<summary>
 Vector Pairwise Add Long.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VPADD">
<summary>
 Vector Pairwise Add.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VPADAL">
<summary>
 Vector Pairwise Add and Accumulate Long.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VORR">
<summary>
 Vector Bitwise OR, if source registers differ.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VORN">
<summary>
 Vector Bitwise OR NOT.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VNMUL">
<summary>
 Vector Negate Multiply Accumulate or Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VNMLS">
<summary>
 Vector Negate Multiply Accumulate or Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VNMLA">
<summary>
 Vector Negate Multiply Accumulate or Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VNEG">
<summary>
 Vector Negate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VMVN">
<summary>
 Vector Bitwise NOT.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VMULL">
<summary>
 Vector Multiply Long.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VMUL">
<summary>
 Vector Multiply
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VMSR">
<summary>
 Move to Floating-point Special register from ARM core register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VMRS">
<summary>
 Move to ARM core register from Floating-point Special register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VMOVN">
<summary>
 Vector Move and Narrow.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VMOVL">
<summary>
 Vector Move Long.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VMOV">
<summary>
 Vector Move.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VMLSL">
<summary>
 Vector Multiply Subtract (T2/A2).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VMLS">
<summary>
 Vector Multiply Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VMLAL">
<summary>
 Vector Multiply Accumulate (T2/A2).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VMLA">
<summary>
 Vector Multiply Accumulate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VMIN">
<summary>
 Vector Minimum.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VMAX">
<summary>
 Vector Maximum.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VLDR">
<summary>
 Vector Load Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VLDMIA">
<summary>
 Vector Load Multiple. Increment After.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VLDMDB">
<summary>
 Vector Load Multiple. Decrement Before.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VLDM">
<summary>
 Vector Load Multiple.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VLD4">
<summary>
 Vector Load. (multiple 4-element structures).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VLD3">
<summary>
 Vector Load. (multiple 3-element structures).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VLD2">
<summary>
 Vector Load. (multiple 2-element structures).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VLD1">
<summary>
 Vector Load. (multiple single elements).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VHSUB">
<summary>
 Vector Halving Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VHADD">
<summary>
 Vector Halving Add.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VFNMS">
<summary>
 Vector Fused Negate Multiply Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VFNMA">
<summary>
 Vector Fused Negate Multiply Accumulate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VFMS">
<summary>
Vector Fused Multiply Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VFMA">
<summary>
Vector Fused Multiply Accumulate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VEXT">
<summary>
 Vector Extract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VEOR">
<summary>
 Vector Bitwise Exclusive OR
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VDUP">
<summary>
 Vector Duplicate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VDIV">
<summary>
 Vector Divide.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCVTT">
<summary>
 Convert between half-precision and single-precision.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCVTR">
<summary>
 Vector Convert floating-point to integer.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCVTP">
<summary>
 Convert floating-point to integer with Round towards Plus Infinity.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCVTN">
<summary>
 Convert floating-point to integer with Round to Nearest.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCVTM">
<summary>
 Convert floating-point to integer with Round towards Minus Infinity.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCVTB">
<summary>
 Convert between half-precision and single-precision.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCVTA">
<summary>
 Convert floating-point to integer with Round to Nearest with Ties to Away.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCVT">
<summary>
 Vector Convert.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCNT">
<summary>
 Vector Count.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCMPE">
<summary>
 Vector Compare. (Encoded as E = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCMP">
<summary>
 Vector Compare. (Encoded as E = 0)
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCLZ">
<summary>
 Vector Count Leading Zeros.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCLT">
<summary>
 Vector Compare Less Than Zero.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCLS">
<summary>
 Vector Count Leading Sign Bits.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCLE">
<summary>
 Vector Compare Less Than or Equal to Zero.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCGT">
<summary>
 Vector Compare Greater Than.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCGE">
<summary>
 Vector Compare Greater Than or Equal.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VCEQ">
<summary>
 Vector Compare Equal.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VBSL">
<summary>
 Vector Bitwise Select. Bitwise Select, encoded as op = 0b01.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VBIT">
<summary>
 Vector Bitwise Select. Bitwise Insert if True, encoded as op = 0b10.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VBIF">
<summary>
 Vector Bitwise Select. Bitwise Insert if False, encoded as op = 0b11.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VBIC">
<summary>
 Vector Bitwise Bit Clear, AND complement.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VAND">
<summary>
 Vector Bitwise AND.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VADDW">
<summary>
 Vector Add Wide.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VADDL">
<summary>
 Vector Add Long.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VADDHN">
<summary>
 Vector Add and Narrow, returning High Half.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VADD">
<summary>
 Vector Add.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VACLT">
<summary>
 Vector Absolute Compare Greater or Less Than (or Equal).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VACLE">
<summary>
 Vector Absolute Compare Greater or Less Than (or Equal).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VACGT">
<summary>
 Vector Absolute Compare Greater or Less Than (or Equal).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VACGE">
<summary>
 Vector Absolute Compare Greater or Less Than (or Equal).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VABS">
<summary>
 Vector Absolute.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VABDL">
<summary>
 Vector Absolute Difference (T2/A2).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VABD">
<summary>
 Vector Absolute Difference.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VABAL">
<summary>
 Vector Absolute Difference and Accumulate (T2/A2).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.VABA">
<summary>
 Vector Absolute Difference and Accumulate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UXTH">
<summary>
 Unsigned Extend Halfword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UXTB16">
<summary>
 Unsigned Extend Byte 16.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UXTB">
<summary>
 Unsigned Extend Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UXTAH">
<summary>
 Unsigned Extend and Add Halfword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UXTAB16">
<summary>
 Unsigned Extend and Add Byte 16.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UXTAB">
<summary>
 Unsigned Extend and Add Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.USUB8">
<summary>
 Subtract 8-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.USUB16">
<summary>
 Subtract 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.USAX">
<summary>
 Subtract and Add with Exchange, 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.USAT16">
<summary>
 Unsigned Saturate, two 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.USAT">
<summary>
 Unsigned Saturate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.USADA8">
<summary>
 Unsigned Sum of Absolute Differences, Accumulate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.USAD8">
<summary>
 Unsigned Sum of Absolute Differences.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UQSUB8">
<summary>
 Saturating Subtract 8-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UQSUB16">
<summary>
 Saturating Subtract 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UQSAX">
<summary>
 Saturating Subtract and Add with Exchange, 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UQASX">
<summary>
 Saturating Add and Subtract with Exchange, 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UQADD8">
<summary>
 Saturating Add 8-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UQADD16">
<summary>
 Saturating Add 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UMULLS">
<summary>
 Unsigned Multiply Long and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UMULL">
<summary>
 Unsigned Multiply Long.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UMLALS">
<summary>
 Unsigned Multiply Accumulate Long and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UMLAL">
<summary>
 Unsigned Multiply Accumulate Long.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UMAAL">
<summary>
 Unsigned Multiply Accumulate Accumulate Long.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UHSUB8">
<summary>
 Halving Add 8-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UHSUB16">
<summary>
 Halving Subtract 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UHSAX">
<summary>
 Halving Subtract and Add with Exchange, 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UHASX">
<summary>
 Halving Add and Subtract with Exchange, 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UHADD8">
<summary>
 Halving Add 8-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UHADD16">
<summary>
 Halving Add 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UDIV">
<summary>
 Unsigned Divide.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UDF">
<summary>
 Permanently UNDEFINED.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UBFX">
<summary>
 Unsigned Bit Field Extract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UASX">
<summary>
 Add and Subtract with Exchange, 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UADD8">
<summary>
 Add 8-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.UADD16">
<summary>
 Add 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.TST">
<summary>
 Test.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.TEQ">
<summary>
 Test Equivalence.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.TBH">
<summary>
 Table Branch (halfword offsets).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.TBB">
<summary>
 Table Branch (byte offsets).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SXTH">
<summary>
 Signed Extend Halfword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SXTB16">
<summary>
 Signed Extend Byte 16.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SXTB">
<summary>
 Signed Extend Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SXTAH">
<summary>
 Signed Extend and Add Halfword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SXTAB16">
<summary>
 Signed Extend and Add Byte 16.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SXTAB">
<summary>
 Signed Extend and Add Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SWPB">
<summary>
 Swap Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SWP">
<summary>
 Swap Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SVC">
<summary>
 Supervisor Call.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SUBW">
<summary>
 Subtract Wide.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SUBS">
<summary>
 Subtract and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SUB">
<summary>
 Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STRT">
<summary>
 Store Register Unprivileged.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STRHT">
<summary>
 Store Register Halfword Unprivileged.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STRH">
<summary>
 Store Register Halfword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STREXH">
<summary>
 Store Register Exclusive Halfword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STREXD">
<summary>
 Store Register Exclusive Doubleword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STREXB">
<summary>
 Store Register Exclusive Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STREX">
<summary>
 Store Register Exclusive.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STRD">
<summary>
 Store Register Dual.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STRBT">
<summary>
 Store Register Byte Unprivileged.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STRB">
<summary>
 Store Register Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STR">
<summary>
 Store Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STMIB">
<summary>
 Store Multiple. Increment Before.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STMIA">
<summary>
 Store Multiple. Increment After.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STMEA">
<summary>
 Store Multiple. Increment After.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STMDB">
<summary>
 Store Multiple. Decrement Before.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STMDA">
<summary>
 Store Multiple. Decrement After.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STM">
<summary>
 Store Multiple.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STLH">
<summary>
 Store-Release Halfword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STLEXH">
<summary>
 Store-Release Exclusive Halfword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STLEXD">
<summary>
 Store-Release Exclusive Doubleword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STLEXB">
<summary>
 Store-Release Exclusive Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STLEX">
<summary>
 Store-Release Exclusive Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STLB">
<summary>
 Store-Release Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STL">
<summary>
 Store-Release Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STCL">
<summary>
 Store Coprocessor (T1/A1) (D == 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STC2L">
<summary>
 Store Coprocessor (T2/A2) (D == 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STC2">
<summary>
 Store Coprocessor (T2/A2).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.STC">
<summary>
 Store Coprocessor (T1/A1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SSUB8">
<summary>
 Subtract 8-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SSUB16">
<summary>
 Subtract 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SSAX">
<summary>
 Subtract and Add with Exchange, 16-bit
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SSAT16">
<summary>
 Signed Saturate, two 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SSAT">
<summary>
 Signed Saturate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SRSIB">
<summary>
 Store Return State. Increment Before.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SRSIA">
<summary>
 Store Return State. Increment After.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SRSDB">
<summary>
 Store Return State. Decrement Before.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SRSDA">
<summary>
 Store Return State. Decrement After.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SRS">
<summary>
 Store Return State.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMUSDX">
<summary>
 Signed Dual Multiply Subtract (M = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMUSD">
<summary>
 Signed Dual Multiply Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMULWT">
<summary>
 Signed Multiply Accumulate (Word by halfword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMULWB">
<summary>
 Signed Multiply Accumulate (Word by halfword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMULTT">
<summary>
 Signed Multiply Long (Halfwords).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMULTB">
<summary>
 Signed Multiply Long (Halfwords).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMULLS">
<summary>
 Signed Multiply Long and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMULL">
<summary>
 Signed Multiply Long.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMULBT">
<summary>
 Signed Multiply (Halfwords).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMULBB">
<summary>
 Signed Multiply (Halfwords).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMUADX">
<summary>
 Signed Dual Multiply Add (M = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMUAD">
<summary>
 Signed Dual Multiply Add.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMMULR">
<summary>
 Signed Most Significant Word Multiply (R = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMMUL">
<summary>
 Signed Most Significant Word Multiply.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMMLSR">
<summary>
 Signed Most Significant Word Multiply Subtract (R = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMMLS">
<summary>
 Signed Most Significant Word Multiply Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMMLAR">
<summary>
 Signed Most Significant Word Multiply Accumulate (R = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMMLA">
<summary>
 Signed Most Significant Word Multiply Accumulate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLSLDX">
<summary>
 Signed Multiply Subtract Long Dual (M = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLSLD">
<summary>
 Signed Multiply Subtract Long Dual.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLSDX">
<summary>
 Signed Multiply Subtract Dual (M = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLSD">
<summary>
 Signed Multiply Subtract Dual.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLAWT">
<summary>
 Signed Multiply Accumulate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLAWB">
<summary>
 Signed Multiply Accumulate (Word by halfword).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLATT">
<summary>
 Signed Multiply Accumulate (Halfwords).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLATB">
<summary>
 Signed Multiply Accumulate (Halfwords).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLALTT">
<summary>
 Signed Multiply Accumulate Long (Halfwords).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLALTB">
<summary>
 Signed Multiply Accumulate Long.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLALS">
<summary>
 Signed Multiply Accumulate Long and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLALDX">
<summary>
 /// Signed Multiply Accumulate Long Dual (M = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLALD">
<summary>
 Signed Multiply Accumulate Long Dual.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLALBT">
<summary>
 Signed Multiply Accumulate Long (Halfwords).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLALBB">
<summary>
 Signed Multiply Accumulate Long (Halfwords).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLAL">
<summary>
 Signed Multiply Accumulate Long.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLADX">
<summary>
 Signed Multiply Accumulate Dual (M = 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLAD">
<summary>
 Signed Multiply Accumulate Dual.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLABT">
<summary>
 Signed Multiply Accumulate (Halfwords).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMLABB">
<summary>
 Signed Multiply Accumulate (Halfwords).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SMC">
<summary>
 Secure Monitor Call.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SHSUB8">
<summary>
 Halving Subtract 8-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SHSUB16">
<summary>
 Halving Subtract 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SHSAX">
<summary>
 Halving Subtract and Add with Exchange, 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SHASX">
<summary>
 Halving Add and Subtract with Exchange, 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SHADD8">
<summary>
 Halving Add 8-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SHADD16">
<summary>
 Halving Add 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SHA256SU0">
<summary>
 SHA256 schedule update 0.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SHA1SU1">
<summary>
 SHA1 schedule update 1.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SHA1H">
<summary>
 SHA1 fixed rotate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SEVL">
<summary>
 Send Event Local is a hint instruction.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SEV">
<summary>
 Send Event.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SETEND">
<summary>
 Set Endianness.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SEL">
<summary>
 Select Bytes.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SDIV">
<summary>
 Signed Divide.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SBFX">
<summary>
 Signed Bit Field Extract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SBCS">
<summary>
 Subtract with Carry and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SBC">
<summary>
 Subtract with Carry.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SASX">
<summary>
 Add and Subtract with Exchange, 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SADD8">
<summary>
 Add 8-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.SADD16">
<summary>
 Add 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.RSCS">
<summary>
 Reverse Subtract with Carry and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.RSC">
<summary>
 Reverse Subtract with Carry.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.RSBS">
<summary>
 Reverse Subtract and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.RSB">
<summary>
 Reverse Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.RRXS">
<summary>
 Rotate Right with Extend and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.RRX">
<summary>
 Rotate Right with Extend.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.RORS">
<summary>
 Rotate Right and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.ROR">
<summary>
 Rotate Right.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.RFEIB">
<summary>
 Return From Exception. Increment Before.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.RFEIA">
<summary>
 Return From Exception. Increment After.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.RFEDB">
<summary>
 Return From Exception. Decrement Before.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.RFEDA">
<summary>
 Return From Exception. Decrement After.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.RFE">
<summary>
 Return From Exception.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.REVSH">
<summary>
 Byte-Reverse Signed Halfword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.REV16">
<summary>
 Byte-Reverse Packed Halfword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.REV">
<summary>
 Byte-Reverse Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.RBIT">
<summary>
 Reverse Bits.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.QSUB8">
<summary>
 Saturating Add 8-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.QSUB16">
<summary>
 Saturating Subtract 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.QSUB">
<summary>
 Saturating Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.QSAX">
<summary>
 Saturating Subtract and Add with Exchange, 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.QDSUB">
<summary>
 Saturating Double and Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.QDADD">
<summary>
 Saturating Double and Add.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.QASX">
<summary>
 Saturating Add and Subtract with Exchange, 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.QADD8">
<summary>
 Saturating Add 8-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.QADD16">
<summary>
 Saturating Add 16-bit.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.QADD">
<summary>
 Saturating Add.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.PUSH">
<summary>
 Push Multiple Registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.POP">
<summary>
 Pop Multiple Registers.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.PLI">
<summary>
 Preload Instruction.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.PLDW">
<summary>
 Preload Data (W = 1 in Thumb or R = 0 in ARM).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.PLD">
<summary>
 Preload Data.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.PKHTB">
<summary>
 Pack Halfword (tbform == TRUE).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.PKHBT">
<summary>
 Pack Halfword (tbform == FALSE).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.ORRS">
<summary>
 Bitwise OR and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.ORR">
<summary>
 Bitwise OR.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.ORNS">
<summary>
 Bitwise OR NOT and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.ORN">
<summary>
 Bitwise OR NOT.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.NOP">
<summary>
 No Operation.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MVNS">
<summary>
 Bitwise NOT and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MVN">
<summary>
 Bitwise NOT.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MULS">
<summary>
 Multiply and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MUL">
<summary>
 Multiply.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MSR">
<summary>
 Move to Special register, Application level.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MRS">
<summary>
 Move from Banked or Special register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MRRC2">
<summary>
 Move to two ARM core registers from Coprocessor (T2/A2).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MRRC">
<summary>
 Move to two ARM core registers from Coprocessor (T1/A1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MRC2">
<summary>
 Move to ARM core register from Coprocessor (T2/A2).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MRC">
<summary>
 Move to ARM core register from Coprocessor (T1/A1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MOVW">
<summary>
 Move (Only encoding T3 or A2 permitted).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MOVT">
<summary>
 Move Top (16-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MOVS">
<summary>
 Move and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MOV">
<summary>
 Move.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MLS">
<summary>
 Multiply and Subtract.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MLAS">
<summary>
 Multiply Accumulate and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MLA">
<summary>
 Multiply Accumulate.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MCRR2">
<summary>
 Move to Coprocessor from two ARM core registers (T2/A2).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MCRR">
<summary>
 Move to Coprocessor from two ARM core registers (T1/A1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MCR2">
<summary>
 Move to Coprocessor from ARM core register (T2/A2).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.MCR">
<summary>
 Move to Coprocessor from ARM core register (T1/A1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LSRS">
<summary>
 Logical Shift Right and OutSide IT block.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LSR">
<summary>
 Logical Shift Right.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LSLS">
<summary>
 Logical Shift Left and OutSide IT block.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LSL">
<summary>
 Logical Shift Left.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LEAVEX">
<summary>
 Exit ThumbEE state.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDRT">
<summary>
 Load Register Unprivileged.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDRSHT">
<summary>
 Load Register Signed Halfword Unprivileged.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDRSH">
<summary>
 Load Register Signed Halfword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDRSBT">
<summary>
 Load Register Signed Byte Unprivileged.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDRSB">
<summary>
 Load Register Signed Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDRHT">
<summary>
 Load Register Halfword Unprivileged.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDRH">
<summary>
 Load Register Halfword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDREXH">
<summary>
 Load Register Exclusive Halfword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDREXD">
<summary>
 Load Register Exclusive Doubleword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDREXB">
<summary>
 Load Register Exclusive Byte
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDREX">
<summary>
 Load Register Exclusive.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDRD">
<summary>
 Load Register Dual.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDRBT">
<summary>
 Load Register Byte Unprivileged.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDRB">
<summary>
 Load Register Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDR">
<summary>
 Load Register.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDMIB">
<summary>
 Load Multiple. Increment Before.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDMIA">
<summary>
 Load Multiple. Increment After.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDMDB">
<summary>
 Load Multiple. Decrement Before.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDMDA">
<summary>
 Load Multiple. Decrement After.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDM">
<summary>
 Load Multiple.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDCL">
<summary>
 Load Coprocessor.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDC2L">
<summary>
 Load Coprocessor.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDC2">
<summary>
 Load Coprocessor.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDC">
<summary>
 Load Coprocessor.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDAH">
<summary>
 Load-Acquire Halfword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDAEXH">
<summary>
 Load-Acquire Exclusive Halfword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDAEXD">
<summary>
 Load-Acquire Exclusive Double.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDAEXB">
<summary>
 Load-Acquire Exclusive Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDAEX">
<summary>
 Load-Acquire Exclusive Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDAB">
<summary>
 Load-Acquire Byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.LDA">
<summary>
 Load-Acquire Word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.ISB">
<summary>
 Instruction Synchronization Barrier.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.HVC">
<summary>
 Hypervisor Call.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.HLT">
<summary>
 Halt Instruction.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.FSTMIAX">
<summary>
 Stores multiple SIMD&amp;FP registers .
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.FSTMDBX">
<summary>
 Stores multiple SIMD&amp;FP registers .
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.ERET">
<summary>
 Exception Return.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.EORS">
<summary>
 Bitwise Exclusive OR and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.EOR">
<summary>
 Bitwise Exclusive OR.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.ENTERX">
<summary>
 Enter ThumbEE state.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.DSB">
<summary>
 Data Synchronization Barrier.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.DMB">
<summary>
 Data Memory Barrier.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.DBG">
<summary>
 Debug hint.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.CRC32W">
<summary>
 CRC-32 sum from word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.CRC32H">
<summary>
 CRC-32 sum from halfword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.CRC32CW">
<summary>
 CRC-32C sum from word.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.CRC32CH">
<summary>
 CRC-32C sum from halfword.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.CRC32CB">
<summary>
 CRC-32C sum from byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.CRC32B">
<summary>
 CRC-32 sum from byte.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.CPSIE">
<summary>
 Change Processor State, Interrupt Enasble.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.CPSID">
<summary>
 Change Processor State, Interrupt Disasble.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.CPS">
<summary>
 Change Processor State.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.CMP">
<summary>
 Compare.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.CMN">
<summary>
 Compare Negative.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.CLZ">
<summary>
 Count Leading Zeros.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.CLREX">
<summary>
 Clear-Exclusive.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.CDP2">
<summary>
 Coprocessor data operations.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.CDP">
<summary>
 Coprocessor data operations.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.CBZ">
<summary>
 Compare and Branch on Zero.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.CBNZ">
<summary>
 Compare and Branch on Nonzero.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.BXJ">
<summary>
 Branch and Exchange Jazelle.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.BX">
<summary>
 Branch and Exchange.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.BLX">
<summary>
 Branch with Link and Exchange.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.BL">
<summary>
 Branch with Link.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.BKPT">
<summary>
 Breakpoint.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.BICS">
<summary>
 Bitwise Bit Clear and updates the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.BIC">
<summary>
 Bitwise Bit Clear.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.BFI">
<summary>
 Bit Field Insert.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.BFC">
<summary>
 Bit Field Clear.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.B">
<summary>
 Branch or Conditional branch.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.ASRS">
<summary>
 Arithmetic Shift Right and update the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.ASR">
<summary>
 Arithmetic Shift Right.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.ANDS">
<summary>
 Bitwise AND and updates the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.AND">
<summary>
 Bitwise AND.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.AESMC">
<summary>
 AES mix columns.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.AESIMC">
<summary>
 AES inverse mix columns.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.AESE">
<summary>
 AES single round encryption.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.AESD">
<summary>
 AES single round decryption.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.ADR">
<summary>
 Form PC-relative Address.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.ADDW">
<summary>
 Add Wide (12-bit).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.ADDS">
<summary>
 Add and updates the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.ADD">
<summary>
 Add.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.ADCS">
<summary>
 Add with Carry and updates the flags.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Opcode.ADC">
<summary>
 Add with Carry.
</summary>
</member>
<member name="T:B2R2.FrontEnd.ARM32.Opcode">
 <summary>
   ARM32 opcodes. This type should be generated using
   <c>scripts/genOpcode.fsx</c> from the `ARM32SupportedOpcode.txt` file.
 </summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.UN">
<summary>
 Unconditional.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.NV">
<summary>
 The condition code NV exists only to provide a valid disassembly of
 the 0b1111 encoding, otherwise its behavior is identical to AL.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.AL">
<summary>
 Always (unconditional)/Always (unconditional) Any.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.LE">
<summary>
 Signed less than or equal/Less than, equal, or unordered
 (Z == 1 or N != V).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.GT">
<summary>
 Signed greater than/Greater than (Z == 0 and N == V).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.LT">
<summary>
 Signed less than/Less than, or unordered (N != V).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.GE">
<summary>
 Signed greater than or equal/Greater than or equal (N == V).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.LS">
<summary>
 Unsigned lower or same/Less than or equal (C == 0 or Z == 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.HI">
<summary>
 Unsigned higher/Greater than, or unordered (C == 1 and Z == 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.VC">
<summary>
 No overflow/Not unordered (V == 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.VS">
<summary>
 Overflow/Unordered (V == 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.PL">
<summary>
 Plus, positive or zero/Greater than, equal, or unordered (N == 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.MI">
<summary>
 Minus, negative/Less than (N == 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.LO">
<summary>
 LO (unsigned lower) is a synonym for CC.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.CC">
<summary>
 Carry clear/Less than (C == 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.HS">
<summary>
 HS (unsigned higher or same) is a synonym for CS.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.CS">
<summary>
 Carry set/Greater than, equal, or unordered (C == 1).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.NE">
<summary>
 Not equal/Not equal, or unordered (Z == 0).
</summary>
</member>
<member name="F:B2R2.FrontEnd.ARM32.Condition.EQ">
<summary>
 Equal/Equal (Z == 1).
</summary>
</member>
<member name="T:B2R2.FrontEnd.ARM32.Condition">
 <sumary>
   Most ARM instructions, and most Thumb instructions from ARMv6T2 onwards,
   can be executed conditionally, based on the values of the APSR condition
   flags. Before ARMv6T2, the only conditional Thumb instruction was
   the 16-bit conditional branch instruction.
 </sumary>
</member>
<member name="T:B2R2.FrontEnd.ARM32.ARM32Instruction">
<summary>
 The internal representation for an ARM32 instruction used by our
 disassembler and lifter.
</summary>
</member>
<member name="T:B2R2.FrontEnd.ARM32.ARM32Parser">
<summary>
 Parser for 32-bit ARM instructions. Parser will return a platform-agnostic
 instruction type (Instruction).
</summary>
</member>
<member name="T:B2R2.FrontEnd.ARM32.ARM32TranslationContext">
<summary>
 Translation context for 32-bit ARM instructions.
</summary>
</member>
<member name="T:B2R2.FrontEnd.ARM32.InvalidRegAccessException">
<summary>
 This is a fatal error that happens when B2R2 tries to access non-existing
 register symbol. This exception should not happen in general.
</summary>
</member>
<member name="T:B2R2.FrontEnd.ARM32.RegisterModule">
<summary>
 This module exposes several useful functions to handle ARMv8 registers.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.ParseUtils.signExtend(System.Int32,System.Int32,System.UInt64)">
<summary>
 The function SignExtend() in the manual.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.ParseUtils.lastInITBlock(B2R2.FrontEnd.ParsingContext)">
<summary>
 Test if the current instruction is the last instruction of an IT block.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.ParseUtils.inITBlock(B2R2.FrontEnd.ParsingContext)">
<summary>
 Test if the current instruction is in an IT block.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.ParseUtils.decodeRegShift(System.UInt32)">
<summary>
 The DecodeRegShift() function in the manual.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.ParseUtils.decodeImmShift(System.UInt32,System.UInt32)">
<summary>
 The DecodeImmShift() function in the manual.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.OperandHelper.getCPS(System.UInt32)">
<summary>
 OprMemory hints, Adv SIMD instrs, and miscellaneous instrs, page A5-217
 CPS, CPSID, CPSIE on page F4-2645 in ARMv8-A ARM DDI 0487A.k
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.OperandHelper.parseHalfMulNMulAcc``1(System.UInt32)">
<summary>
 Halfword multiply and multi..., page A5-203 in ARMv7-A , DDI0406C.b
 Halfword Multiply and Accumulate on page F4-2510  in ARMv8-A ARM DDI 0487A.k
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.OperandHelper.parseMulNMulAcc``1(System.UInt32)">
<summary>
 Multiply and multiply-accumulate, page A5-202 in ARMv7-A , DDI0406C.b
 Multiply and Accumulate, page F4.2.2 in ARMv8-A ARM DDI 0487A.k
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Disasm.flagToString(B2R2.FrontEnd.ARM32.PSRFlag)">
<summary>
 See A8-499 the description of &lt;spec_reg&gt;.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.IRHelper.isInstrSetThumbEE(B2R2.FrontEnd.TranslationContext)">
<summary>
 Is this ThumbEE instruction set, on page A2-51.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.IRHelper.isInstrSetThumb(B2R2.FrontEnd.TranslationContext)">
<summary>
 Is this Thumb instruction set, on page A2-51.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.IRHelper.isInstrSetARM(B2R2.FrontEnd.TranslationContext)">
<summary>
 Is this ARM instruction set, on page A2-51.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.IRHelper.currentModeIsHyp(B2R2.FrontEnd.TranslationContext)">
<summary>
 Returns TRUE if current mode is Hyp mode, on page B1-1142.
 function : CurrentModeIsHyp()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.IRHelper.currentModeIsUserOrSystem(B2R2.FrontEnd.TranslationContext)">
<summary>
 Returns TRUE if current mode is User or System mode, on page B1-1142.
 function : CurrentModeIsUserOrSystem()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.IRHelper.isBadMode(B2R2.BinIR.LowUIR.Expr)">
<summary>
 Test whether mode number is valid, on page B1-1142.
 function : BadMode()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.IRHelper.getPSR(B2R2.FrontEnd.TranslationContext,B2R2.FrontEnd.ARM32.Register,B2R2.FrontEnd.ARM32.PSR)">
<summary>
 Get PSR bits without shifting it.
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.IRHelper.maskPSRForMbits">
<summary>
 Gets the mask bits for fetching the M[4:0] bits from the PSR.
 PSR bits[4:0]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.IRHelper.maskPSRForTbit">
<summary>
 Gets the mask bits for fetching the T bit from the PSR.
 PSR bit[5]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.IRHelper.maskPSRForFbit">
<summary>
 Gets the mask bits for fetching the F bit from the PSR.
 PSR bit[6]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.IRHelper.maskPSRForIbit">
<summary>
 Gets the mask bits for fetching the I bit from the PSR.
 PSR bit[7]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.IRHelper.maskPSRForAbit">
<summary>
 Gets the mask bits for fetching the A bit from the PSR.
 PSR bit[8]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.IRHelper.maskPSRForEbit">
<summary>
 Gets the mask bits for fetching the E bit from the PSR.
 PSR bit[9]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.IRHelper.maskPSRForIT72bits">
<summary>
 Gets the mask bits for fetching the IT[7:2] bits from the PSR.
 PSR bits[15:10]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.IRHelper.maskPSRForGEbits">
<summary>
 Gets the mask bits for fetching the GE[3:0] bits from the PSR.
 PSR bits[19:16]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.IRHelper.maskPSRForJbit">
<summary>
 Gets the mask bits for fetching the J bit from the PSR.
 PSR bit[24]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.IRHelper.maskPSRForIT10bits">
<summary>
 Gets the mask bits for fetching the IT[1:0] bits from the PSR.
 PSR bits[26:25]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.IRHelper.maskPSRForQbit">
<summary>
 Gets the mask bits for fetching the Q bit from the PSR.
 PSR bit[27]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.IRHelper.maskPSRForVbit">
<summary>
 Gets the mask bits for fetching the V condition flag from the PSR.
 PSR bit[28]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.IRHelper.maskPSRForCbit">
<summary>
 Gets the mask bits for fetching the C condition flag from the PSR.
 PSR bit[29]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.IRHelper.maskPSRForZbit">
<summary>
 Gets the mask bits for fetching the Z condition flag from the PSR.
 PSR bits[30]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.IRHelper.maskPSRForNbit">
<summary>
 Gets the mask bits for fetching the N condition flag from the PSR.
 PSR bit[31]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.IRHelper.maskPSRForCondbits">
<summary>
 Gets the mask bits for fetching the condition flag bits from the PSR.
 PSR bit[31:28]
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.IRHelper.haveVirtExt">
<summary>
 Returns TRUE if the implementation includes the Virtualization Extensions,
 on page AppxP-2660. function : HaveVirtExt()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.IRHelper.haveSecurityExt">
<summary>
 Returns TRUE if the implementation includes the Security Extensions,
 on page B1-1157. function : HaveSecurityExt()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.translate(B2R2.FrontEnd.ARM32.InsInfo,B2R2.FrontEnd.TranslationContext)">
<summary>
 Translate IR.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.getParsingInfo(B2R2.FrontEnd.ARM32.InsInfo)">
<summary>
 Parsing information for SIMD instructions
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.parseOprOfADR(B2R2.FrontEnd.ARM32.InsInfo,B2R2.FrontEnd.TranslationContext)">
<summary>
 ADR For ThumbMode (T1 case)
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.str(B2R2.FrontEnd.ARM32.InsInfo,B2R2.FrontEnd.TranslationContext,System.Int32)">
<summary>
 Store register.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.ldr(B2R2.FrontEnd.ARM32.InsInfo,B2R2.FrontEnd.TranslationContext,System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr}})">
<summary>
 Load register
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.smulandacc(System.Boolean,System.Boolean,B2R2.FrontEnd.ARM32.InsInfo,B2R2.FrontEnd.TranslationContext)">
<summary>
 SMULL, SMLAL, etc.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.subsAndRelatedInstr(B2R2.FrontEnd.ARM32.InsInfo,B2R2.FrontEnd.TranslationContext)">
<summary>
 B9.3.20 SUBS R.PC, R.LR and related instruction (ARM), on page B9-2010
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.subsPCLRThumb(B2R2.FrontEnd.ARM32.InsInfo,B2R2.FrontEnd.TranslationContext)">
<summary>
 B9.3.19 SUBS R.PC, R.LR (Thumb), on page B9-2008
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.align(B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Align integer or bitstring to multiple of an integer, on page AppxP-2655
 function : Align()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.itAdvance(B2R2.FrontEnd.TranslationContext,B2R2.FrontEnd.StmtBuilder)">
<summary>
 Update ITState after normal execution of an IT-block instruction. See A2-52
 function: ITAdvance().
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.cpsrWriteByInstr(B2R2.FrontEnd.TranslationContext,B2R2.BinIR.LowUIR.Expr,System.Int32,System.Boolean,B2R2.FrontEnd.StmtBuilder)">
<summary>
 R.CPSR write by an instruction, on page B1-1152.
 function : CPSRWriteByInstr()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.ones(System.Int32)">
<summary>
 All-ones bitstring, on page AppxP-2652.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.replicate(B2R2.BinIR.LowUIR.Expr,System.Int32,System.Int32,System.Int32,System.Int32)">
<summary>
 Bitstring replication, on page AppxP-2652.
 function : Replicate()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.currentModeIsNotUser(B2R2.FrontEnd.TranslationContext)">
<summary>
 Return TRUE if current mode is executes at PL1 or higher, on page B1-1142.
 function : CurrentModeIsNotUser()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.isSecure(B2R2.FrontEnd.TranslationContext)">
<summary>
 Returns TRUE in Secure state or if no Security Extensions, on page B1-1157.
 function : IsSecure()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.pcStoreValue(B2R2.FrontEnd.TranslationContext)">
<summary>
 Value stored when an ARM instruction stores the R.PC, on page A2-47.
 function : PCStoreValue()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.memU``3(``0,``1,``2)">
<summary>
 OprMemory access without alignment requirement, at current privilege level,
 on page B2-1295. function : MemU[]
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.memUWithPriv``3(``0,``1,``2)">
<summary>
 OprMemory access that must be aligned, at specified privilege level,
 on page B2-1294. function : MemU_with_priv[]
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.memA``3(``0,``1,``2)">
<summary>
 OprMemory access that must be aligned, at current privilege level,
 on page B2-1294. function : MemA_with_priv[]
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.memAWithPriv``3(``0,``1,``2)">
<summary>
 OprMemory access that must be aligned, at specified privilege level,
 on page B2-1294. function : MemA[]
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.countLeadingZeroBits(System.UInt32,System.Int32)">
<summary>
 Number of zeros at left end of bitstring, on page AppxP-2653.
 function : CountLeadingZeroBits()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.bitCount(System.UInt32,System.Int32)">
<summary>
 Count number of ones in a bitstring, on page AppxP-2653.
 function : BitCount() (for uint32)
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.bitCountFor16Bits(B2R2.BinIR.LowUIR.Expr)">
<summary>
 Count number of ones in a bitstring, on page AppxP-2653.
 function : BitCount()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.highestSetBit(System.UInt32,System.Int32)">
<summary>
 Position of leftmost 1 in a bitstring, on page AppxP-2653.
 function : HighestSetBit()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.lowestSetBit(System.UInt32,System.Int32)">
<summary>
 Position of rightmost 1 in a bitstring, on page AppxP-2653.
 function : LowestSetBit()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.loadWritePC(B2R2.FrontEnd.TranslationContext,System.Boolean,B2R2.FrontEnd.StmtBuilder,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Write value to R.PC, with interworking (without it before ARMv5T),
 on page A2-47. function : LoadWritePC()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.aluWritePC(B2R2.FrontEnd.TranslationContext,B2R2.FrontEnd.ARM32.InsInfo,System.Boolean,B2R2.BinIR.LowUIR.Expr,B2R2.FrontEnd.StmtBuilder)">
<summary>
 Write value to R.PC, with interworking for ARM only from ARMv7 on page
 A2-47. function : ALUWritePC()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.bxWritePC(B2R2.FrontEnd.TranslationContext,System.Boolean,B2R2.BinIR.LowUIR.Expr,B2R2.FrontEnd.StmtBuilder)">
<summary>
 Write value to R.PC, with interworking, on page A2-47.
 function : BXWritePC()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.branchWritePC(B2R2.FrontEnd.TranslationContext,B2R2.FrontEnd.ARM32.InsInfo,B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.InterJmpInfo)">
<summary>
 Write value to R.PC, without interworking, on page A2-47.
 function : BranchWritePC()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.selectInstrSet(B2R2.FrontEnd.TranslationContext,B2R2.FrontEnd.StmtBuilder,B2R2.ArchOperationMode)">
<summary>
 Sets the instruction set currently in use, on page A2-51.
 SelectInstrSet()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.selectThumbInstrSet(B2R2.FrontEnd.TranslationContext,B2R2.FrontEnd.StmtBuilder)">
<summary>
 Sets the ARM instruction set, on page A2-51.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.selectARMInstrSet(B2R2.FrontEnd.TranslationContext,B2R2.FrontEnd.StmtBuilder)">
<summary>
 Sets the ARM instruction set, on page A2-51.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.addWithCarry(B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Addition of bitstrings, with carry input and carry/overflow outputs,
 on page A2-43. function : AddWithCarry()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shift(B2R2.BinIR.LowUIR.Expr,System.Int32,B2R2.FrontEnd.ARM32.SRType,System.UInt32,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Perform a specified shift by a specified amount on a bitstring,
 on page A8-292. function : OprShift()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftForRegAmount(B2R2.BinIR.LowUIR.Expr,System.Int32,B2R2.FrontEnd.ARM32.SRType,B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Perform a specified shift by a specified amount on a bitstring,
 on page A8-292.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftC(B2R2.BinIR.LowUIR.Expr,System.Int32,B2R2.FrontEnd.ARM32.SRType,System.UInt32,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Perform a specified shift by a specified amount on a bitstring,
 with carry output, on page A8-292. function : Shift_C()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftRRX(B2R2.BinIR.LowUIR.Expr,System.Int32,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Rotate right with extend of a bitstring, on page A2-41.
 function : RRX()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftRRXC(B2R2.BinIR.LowUIR.Expr,System.Int32,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Rotate right with extend of a bitstring, with carry output, on page A2-41.
 function : RRX_C()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftROR(B2R2.BinIR.LowUIR.Expr,System.Int32,System.UInt32)">
<summary>
 Rotate right of a bitstring, on page A2-41. function : ROR()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftRORC(B2R2.BinIR.LowUIR.Expr,System.Int32,System.UInt32)">
<summary>
 Rotate right of a bitstring, with carry output, on page A2-41.
 function : ROR_C()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftASR(B2R2.BinIR.LowUIR.Expr,System.Int32,System.UInt32)">
<summary>
 Logical shift right of a bitstring, on page A2-41. function : ASR()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftASRC(B2R2.BinIR.LowUIR.Expr,System.Int32,System.UInt32)">
<summary>
 Arithmetic shift right of a bitstring, with carry output, on page A2-41.
 function : ASR_C()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftLSR(B2R2.BinIR.LowUIR.Expr,System.Int32,System.UInt32)">
<summary>
 Logical shift right of a bitstring, on page A2-41. function : LSR()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftLSRC(B2R2.BinIR.LowUIR.Expr,System.Int32,System.UInt32)">
<summary>
 Logical shift right of a bitstring, with carry output, on page A2-41.
 function : LSR_C()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftLSL(B2R2.BinIR.LowUIR.Expr,System.Int32,System.UInt32)">
<summary>
 Logical shift left of a bitstring, on page A2-41. function : LSL()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftLSLC(B2R2.BinIR.LowUIR.Expr,System.Int32,System.UInt32)">
<summary>
 Logical shift left of a bitstring, with carry output, on page A2-41.
 function : LSL_C()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftCForRegAmount(B2R2.BinIR.LowUIR.Expr,System.Int32,B2R2.FrontEnd.ARM32.SRType,B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Perform a specified shift by a specified amount on a bitstring,
 with carry output, on page A8-292.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftRRXForRegAmount(B2R2.BinIR.LowUIR.Expr,System.Int32,B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Rotate right with extend of a bitstring, on page A2-41. for Register amount.
 function : RRX()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftRRXCForRegAmount(B2R2.BinIR.LowUIR.Expr,System.Int32,B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Rotate right with extend of a bitstring, with carry output, on page A2-41.
 for Register amount. function : RRX_C()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftRORForRegAmount(B2R2.BinIR.LowUIR.Expr,System.Int32,B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Rotate right of a bitstring, on page A2-41. for Register amount.
 function : ROR()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftRORCForRegAmount(B2R2.BinIR.LowUIR.Expr,System.Int32,B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Rotate right of a bitstring, with carry output, on page A2-41.
 for Register amount. function : ROR_C()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftASRForRegAmount(B2R2.BinIR.LowUIR.Expr,System.Int32,B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Logical shift right of a bitstring, on page A2-41. for Register amount.
 function : ASR()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftASRCForRegAmount(B2R2.BinIR.LowUIR.Expr,System.Int32,B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Arithmetic shift right of a bitstring, with carry output, on page A2-41.
 for Register amount. function : ASR_C()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftLSRForRegAmount(B2R2.BinIR.LowUIR.Expr,System.Int32,B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Logical shift right of a bitstring, on page A2-41. for Register amount.
 function : LSR()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftLSRCForRegAmount(B2R2.BinIR.LowUIR.Expr,System.Int32,B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Logical shift right of a bitstring, with carry output, on page A2-41.
 for Register amount. function : LSR_C()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftLSLForRegAmount(B2R2.BinIR.LowUIR.Expr,System.Int32,B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Logical shift left of a bitstring, on page A2-41. for Register amount.
 function : LSL()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.shiftLSLCForRegAmount(B2R2.BinIR.LowUIR.Expr,System.Int32,B2R2.BinIR.LowUIR.Expr,B2R2.BinIR.LowUIR.Expr)">
<summary>
 Logical shift left of a bitstring, with carry output, on page A2-41.
 for Register amount. function : LSL_C()
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Lifter.conditionPassed(B2R2.FrontEnd.TranslationContext,B2R2.FrontEnd.ARM32.Condition)">
<summary>
 Returns TRUE if the current instruction needs to be executed. See page
 A8-289. function : ConditionPassed()
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.Lifter.maskSCTLRForNMFIbit">
<summary>
 Gets the mask bits for fetching the NMFI bit from the SCTLR.
 SCTLR bit[27]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.Lifter.maskSCRForNSbit">
<summary>
 Gets the mask bits for fetching the NS bit from the SCR.
 SCR bit[0]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.Lifter.maskSCRForFWbit">
<summary>
 Gets the mask bits for fetching the FW bit from the SCR.
 SCR bit[4]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.Lifter.maskSCRForAWbit">
<summary>
 Gets the mask bits for fetching the AW bit from the SCR.
 SCR bit[5]
</summary>
</member>
<member name="P:B2R2.FrontEnd.ARM32.Lifter.maskNSACRForRFRbit">
<summary>
 Gets the mask bits for fetching the RFR bit from the NSACR.
 NSACR bit[19]
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseV7Thumb16``2(B2R2.FrontEnd.ParsingContext,System.UInt32)">
<summary>
 ARM Architecture Reference Manual ARMv7-A and ARMv7-R edition, DDI0406C.b
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseV7Thumb32(B2R2.FrontEnd.ParsingContext,System.UInt32)">
<summary>
 ARM Architecture Reference Manual ARMv7-A and ARMv7-R edition, DDI0406C.b
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup20``3(System.UInt32)">
<summary>
 Long multiply, long multiply accumulate, and divide, page A6-250
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup19``3(System.UInt32)">
<summary>
 Multiply, multiply accumulate, and absolute difference, page A6-249
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup19WithRa``3(System.UInt32,System.UInt32)">
<summary>
 Multiply, multiply accumulate, and absolute difference, page A6-249
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup19WithOutRa``3(System.UInt32,System.UInt32)">
<summary>
 Multiply, multiply accumulate, and absolute difference, page A6-249
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup19Sub``3(System.UInt32,System.UInt32)">
<summary>
 Multiply, multiply accumulate, and absolute difference, page A6-249
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup18``2(System.UInt32)">
<summary>
 Data-processing (register), page A6-245
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup18ByRn``2(System.UInt32,System.UInt32)">
<summary>
 Data-processing (register), page A6-245
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup18WithRn``2(System.UInt32,System.UInt32)">
<summary>
 Data-processing (register), page A6-245
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup18Sub``2(System.UInt32,System.UInt32)">
<summary>
 Data-processing (register), page A6-245
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseMiscellaneousOperations``2(System.UInt32,System.UInt32)">
<summary>
 Miscellaneous operations, page A6-248
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseParallelAddSub``3(System.UInt32,System.UInt32)">
<summary>
 Miscellaneous operations, page A6-248
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseParallelAddSubUnsigned(System.UInt32,System.UInt32)">
<summary>
 Parallel addition and subtraction, unsigned, page A6-247
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseParallelAddSubSigned(System.UInt32,System.UInt32)">
<summary>
 Parallel addition and subtraction, signed, page A6-246
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup17``1(System.UInt32)">
<summary>
 Advanced SIMD element or structure load/store instructions, page A7-275
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup16``1(B2R2.FrontEnd.ParsingContext,System.UInt32)">
<summary>
 Load word, page A6-239
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup15``1(System.UInt32)">
<summary>
 Load halfword, memory hints, page A6-240
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup15WithRn``3(System.UInt32,System.UInt32)">
<summary>
 Load halfword, memory hints, page A6-240
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup14``1(System.UInt32)">
<summary>
 Load byte, memory hints, page A6-241
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup13``1(System.UInt32)">
<summary>
 Store single data item, page A6-242
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup13Sub``1(System.UInt32,System.UInt32)">
<summary>
 Store single data item, page A6-242
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup12(B2R2.FrontEnd.ParsingContext,Microsoft.FSharp.Core.FSharpOption{B2R2.FrontEnd.ARM32.Condition},System.UInt32)">
<summary>
 Branches and miscellaneous control, page A6-235
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup12Sub(B2R2.FrontEnd.ParsingContext,Microsoft.FSharp.Core.FSharpOption{B2R2.FrontEnd.ARM32.Condition},System.UInt32)">
<summary>
 Branches and miscellaneous control, page A6-235
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseMiscellaneousInstrs``2(Microsoft.FSharp.Core.FSharpOption{``0},System.UInt32)">
<summary>
 Miscellaneous control instructions, page A6-237
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseChangeProcStateHints``2(B2R2.FrontEnd.ParsingContext,Microsoft.FSharp.Core.FSharpOption{``0},``1,System.UInt32)">
<summary>
 Change Processor State, and hints, page A6-236
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup11``2(``0,System.UInt32)">
<summary>
 Data-processing (plain binary immediate), page A6-234
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup10``1(``0,System.UInt32)">
<summary>
 Data-processing (modified immediate), page A6-231
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup10WithS(System.UInt32,System.UInt32)">
<summary>
 Data-processing (modified immediate), page A6-231
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup10WithRn(System.UInt32,System.UInt32)">
<summary>
 Data-processing (modified immediate), page A6-231
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup10WithRnSub``1(System.UInt32,System.UInt32)">
<summary>
 Data-processing (modified immediate), page A6-231
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup10WithRd(System.UInt32,System.UInt32)">
<summary>
 Data-processing (modified immediate), page A6-231
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup10WithRdSub(System.UInt32,System.UInt32)">
<summary>
 Data-processing (modified immediate), page A6-231
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup9``1(System.UInt32)">
<summary>
 Co-processor, Advanced SIMD, and Floating-point instructions, page A6-251
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup9Sub3(System.UInt32,System.UInt32)">
<summary>
 Co-processor, Advanced SIMD, and Floating-point instructions, page A6-251
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup9Sub``1(System.UInt32,System.UInt32)">
<summary>
 Co-processor, Advanced SIMD, and Floating-point instructions, page A6-251
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup9Sub2``1(System.UInt32,System.UInt32)">
<summary>
 Co-processor, Advanced SIMD, and Floating-point instructions, page A6-251
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup9CDPMRC``1(System.UInt32)">
<summary>
 Co-processor, Advanced SIMD, and Floating-point instructions, page A6-251
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup9LDC(System.UInt32)">
<summary>
 Co-processor, Advanced SIMD, and Floating-point instructions, page A6-251
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup9STC(System.UInt32)">
<summary>
 Co-processor, Advanced SIMD, and Floating-point instructions, page A6-251
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup9MRRC``1(System.UInt32)">
<summary>
 Co-processor, Advanced SIMD, and Floating-point instructions, page A6-251
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup9MCRR``1(System.UInt32)">
<summary>
 Co-processor, Advanced SIMD, and Floating-point instructions, page A6-251
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup8``2(System.UInt32)">
<summary>
 Data-processing (shifted register), page A6-243
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup8WithS(System.UInt32,System.UInt32)">
<summary>
 Data-processing (shifted register), page A6-243
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup8PKH``1(System.UInt32,System.UInt32)">
<summary>
 Data-processing (shifted register), page A6-243
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup8WithRn(System.UInt32,System.UInt32)">
<summary>
 Data-processing (shifted register), page A6-243
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup8WithRnSub(System.UInt32,System.UInt32)">
<summary>
 Data-processing (shifted register), page A6-243
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup8WithRd(System.UInt32,System.UInt32)">
<summary>
 Data-processing (shifted register), page A6-243
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup8WithRdSub(System.UInt32,System.UInt32)">
<summary>
 Data-processing (shifted register), page A6-243
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseMOVRegImmShift(System.UInt32,System.UInt32)">
<summary>
 Move register and immediate shifts, page A6-244
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup7``2(B2R2.FrontEnd.ParsingContext,System.UInt32)">
<summary>
 Load/store dual, load/store exclusive, table branch, page A6-238
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup7With010``1(B2R2.FrontEnd.ParsingContext,System.UInt32,System.UInt32)">
<summary>
 Load/store dual, load/store exclusive, table branch, page A6-238
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup7Not010(System.UInt32,System.UInt32)">
<summary>
 Load/store dual, load/store exclusive, table branch, page A6-238
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup6``1(B2R2.FrontEnd.ParsingContext,System.UInt32)">
<summary>
 Load/store multiple. page A6-237
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup5``1(B2R2.FrontEnd.ParsingContext,Microsoft.FSharp.Core.FSharpOption{B2R2.FrontEnd.ARM32.Condition},System.UInt32)">
<summary>
 Conditional branch, and Supervisor Call, page A6-229
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup4``3(B2R2.FrontEnd.ParsingContext,Microsoft.FSharp.Core.FSharpOption{``0},System.UInt32)">
<summary>
 Miscellaneous 16-bit instructions, page A6-228
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.getIfThenNHints``3(Microsoft.FSharp.Core.FSharpOption{``0},B2R2.FrontEnd.ParsingContext,System.UInt32)">
<summary>
 If-Then, and hints, page A6-229
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup3``2(``0,System.UInt32)">
<summary>
 Load/store single data item, page A6-227
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup2``3(B2R2.FrontEnd.ParsingContext,``0,System.UInt32)">
<summary>
 Special data instructions and branch and exchange, page A6-226
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup1``3(B2R2.FrontEnd.ParsingContext,Microsoft.FSharp.Core.FSharpOption{``0},System.UInt32)">
<summary>
 Data-processing, page A6-225
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup0``3(B2R2.FrontEnd.ParsingContext,Microsoft.FSharp.Core.FSharpOption{``0},System.UInt32)">
<summary>
 Shift (immediate), add, subtract, move, and compare, page A6-224
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup0OutITBlock``3(System.UInt32)">
<summary>
 Shift (immediate), add, subtract, move, and compare, page A6-224
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.group0LSLOutITBlock(System.UInt32)">
<summary>
 Shift (immediate), add, subtract, move, and compare, page A6-224
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup0InITBlock``3(``0,System.UInt32)">
<summary>
 Shift (immediate), add, subtract, move, and compare, page A6-224
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.group0LSLInITBlock(System.UInt32)">
<summary>
 Shift (immediate), add, subtract, move, and compare, page A6-224
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseV7ARM``1(System.UInt32)">
<summary>
 ARM Architecture Reference Manual ARMv7-A and ARMv7-R edition, DDI0406C.b
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseV7ARMUncond``3(System.UInt32)">
<summary>
 ARM Architecture Reference Manual ARMv7-A and ARMv7-R edition, DDI0406C.b
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup111``1(System.UInt32)">
<summary>
 Supervisor Call, and coprocessor instructions, page A5-215
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.uncond111``2(System.UInt32)">
<summary>
 Unconditional instructions, A5-216
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parse81632BTransfer``1(B2R2.ArchOperationMode,System.UInt32)">
<summary>
 8,16,and 32-bit transfer between ARM core and extension registers, A7-278
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseVFP``1(System.UInt32)">
<summary>
 Floating-point data-processing instructions, page A7-272
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseOtherVFP``1(System.UInt32)">
<summary>
 Other VFP data-processing instructions, page A7-272
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup110``1(System.UInt32)">
<summary>
 Supervisor Call, and coprocessor instructions, page A5-215
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseExtRegLoadStore(System.UInt32)">
<summary>
 Extension register load/store instructions, page A7-274
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parse64BitTransfer``1(System.UInt32)">
<summary>
 64-bit transfers between ARM core and extension registers, page A7-279
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.uncond110``1(System.UInt32)">
<summary>
 Unconditional instructions, A5-216
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup101``2(System.UInt32)">
<summary>
 B, BL, page A5-214
 Unconditional instructions, A5-216
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup100``1(System.UInt32)">
<summary>
 Branch, branch with link, and block data transfer, page A5-214
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.uncond100``1(System.UInt32)">
<summary>
 Unconditional instructions, A5-216
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup0111``2(B2R2.FrontEnd.ARM32.Condition,System.UInt32)">
<summary>
 Media instructions, page A5-209
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseSignedMultiplies(System.UInt32)">
<summary>
 Signed multiplies, page A5-213
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parsePackingSaturationReversal(System.UInt32)">
<summary>
 Packing, unpacking, saturation, and reversal, page A5-212
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parsePhrallelAddNSubUnsigned(System.UInt32)">
<summary>
 Parallel addition and subtraction, unsigned, page A5-211
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parsePhrallelAddNSubSigned(System.UInt32)">
<summary>
 Parallel addition and subtraction, signed, page A5-210
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup0110``1(System.UInt32)">
<summary>
 Load/store word and unsigned byte, page A5-208
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.uncond0110``2(System.UInt32)">
<summary>
 Memory hints, Adv SIND instructions, miscellaneous instructions, page A5-217
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup010``1(System.UInt32)">
<summary>
 Load/store word and unsigned byte, page A5-208
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.uncond010(System.UInt32)">
<summary>
 Memory hints, Advanced SIMD instructions, and miscellaneous instructions,
 page A5-217
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.getAdvSIMDOrStrct(System.UInt32)">
<summary>
 Advanced SIMD element or structure load/store instructions, page A7-275
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup001``2(System.UInt32)">
<summary>
 Data-processing and miscellaneous instructions, page A5-196
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseAdvSIMDDataProc``1(System.UInt32,B2R2.ArchOperationMode)">
<summary>
 Advanced SIMD data-processing instructions, page A7-261
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parse2RegMis``1(System.UInt32)">
<summary>
 Two registers, miscellaneous, page A7-267
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parse2RegScalar``1(System.UInt32,System.UInt32)">
<summary>
 Two registers and a scalar, page A7-265
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parse3RegDiffLen``1(System.UInt32,System.UInt32)">
<summary>
 Three registers of different lengths, page A7-264
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parse2Reg``1(System.UInt32,System.UInt32)">
<summary>
 Two registers and a shift amount, page A7-266
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parse1Reg``1(System.UInt32,System.UInt32)">
<summary>
 One register and a modified immediate value, page A7-269
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parse3Reg``1(System.UInt32,System.UInt32)">
<summary>
 Three registers of the same length, page A7-262
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.dataProcImm(System.UInt32,System.UInt32)">
<summary>
 Data-processing (immediate), page A5-199
 ADR is integrated into ADD or SUB respectively
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.getMSRNHints(System.UInt32)">
<summary>
 MSR (immediate) and hints, page A5-206
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseGroup000``1(B2R2.FrontEnd.ARM32.Condition,System.UInt32)">
<summary>
 Data-processing and miscellaneous instructions, page A5-196
 Unconditional SETEND and CPS, page A5-217
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseExLoadStoreInstrsUnpriv``1(System.UInt32)">
<summary>
 Extra load/store instructions (unprivileged), page A5-204
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseExLoadStoreInstrs(System.UInt32)">
<summary>
 Extra load/store instructions, page A5-203
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseSynPrimitives``1(System.UInt32)">
<summary>
 Syncronization primitives, page A5-205
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseMiscelInstrs``1(B2R2.FrontEnd.ARM32.Condition,System.UInt32)">
<summary>
 Miscellaneous instructions, page A5-207
 Saturating addition and subtraction, page A5-202
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseDataProcRegSReg``1(System.UInt32,System.UInt32)">
<summary>
 Data-processing (register-shifted register), page A5-198
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv7.parseDataProcReg``1(System.UInt32,System.UInt32)">
<summary>
 Data-processing (register), page A5-197
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseV8A32ARM``3(System.UInt32)">
<summary>
 ARM Architecture Reference Manual ARMv8-A ARM DDI 0487A.k
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseGroup110v8``1(B2R2.FrontEnd.ARM32.Condition,System.UInt32)">
<summary>
 System register access, Advanced SIMD, floating-point, and Supervisor Call,
 page F4-2531
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseGroup100v8``1(B2R2.FrontEnd.ARM32.Condition,System.UInt32)">
<summary>
 Branch, branch with link, and block data transfer, page F4-2529
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseGroup0111v8``1(B2R2.FrontEnd.ARM32.Condition,System.UInt32)">
<summary>
 Media instructions, page F4-2521
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseGroup0110v8``1(B2R2.FrontEnd.ARM32.Condition,System.UInt32)">
<summary>
 Load/Store Word, Unsigned byte (Register), F4-2520
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseGroup001v8(B2R2.FrontEnd.ARM32.Condition,System.UInt32)">
<summary>
 Data-processing immediate on page F4-2515
 Data-processing and miscellaneous instructions, page F4-2502
 Unconditional instructions on page F4-2540
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseAdvSIMDDataProcV8(System.UInt32)">
<summary>
 Advanced SIMD data-processing on page F4-2541
 Unconditional instructions on page F4-2540
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseAdvSIMDMisc(System.UInt32)">
<summary>
 Advanced SIMD two registers misc on page F4-2542
 Advanced SIMD data-processing on page F4-2541
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parselogicArithImm``1(System.UInt32)">
<summary>
 Logical Arithmetic (two register and immediate) on page F4-2518
 Data-processing and miscellaneous instructions, page F4-2502
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseIntTestCompImm``1(System.UInt32)">
<summary>
 Integer Test &amp; Compare (one register and immediate) on page F4-2517
 Data-processing and miscellaneous instructions, page F4-2502
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseMovSpecRegImm``1(System.UInt32)">
<summary>
 Move Special Register &amp; Hints (immediate) on page F4-2516
 Data-processing and miscellaneous instructions, page F4-2502
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseMovHalfwordImm``1(System.UInt32)">
<summary>
 Move Halfword (immediate) on page F4-2516
 Data-processing immediate on page F4-2515
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseIntDataProcImm``1(System.UInt32)">
<summary>
 Integer Data Processing (two register and immediate)
 Data-processing immediate on page F4-2515
 ADR is integrated into ADD or SUB respectively
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseGroup000v8``1(B2R2.FrontEnd.ARM32.Condition,System.UInt32)">
<summary>
 Data-processing and miscellaneous instructions, page F4-2502
 Unconditional instructions on page F4-2540
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseUnCondMiscellaneous(System.UInt32)">
<summary>
 Change Process State on page F4-2541
 Unconditional instructions on page F4-2540.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseDataProcRegSReg(System.UInt32)">
<summary>
 Data-processing register (register shift) on page F4-2513
 Data-processing and miscellaneous instructions on page F4-2502
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseDataProcImmSReg(System.UInt32)">
<summary>
 Data-processing register (immediate shift) on page F4-2511
 Data-processing and miscellaneous instructions on page F4-2502
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.logicArithRegShift(System.UInt32)">
<summary>
 Logical Arithmetic (three register, register shift) on page F4-2514
 Data-processing register (register shift) on page F4-2512
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.intTestComp(System.UInt32)">
<summary>
 Integer Test &amp; Compare (two register, immediate shift) on page F4-2512
 Integer Test &amp; Compare (two register, register shift) on page F4-2514
 Data-processing register (immediate shift) on page F4-2512
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.intDataProc(System.UInt32)">
<summary>
 Integer Data Processing (three register, immediate shift) on page F4-2511
 Integer Data Processing (three register, register shift) on page F4-2513
 Data-processing register (immediate shift) on page F4-2511
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.logicArithImmShift(System.UInt32)">
<summary>
 Logical Arithmetic (three register, immediate shift) on page F4-2512
 Data-processing register (immediate shift) on page F4-2512
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseMiscelInstrs(B2R2.FrontEnd.ARM32.Condition,System.UInt32)">
<summary>
 Miscellaneous on page F4-2507
 Data-processing and miscellaneous instructions on page F4-2502
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseIntArithmeticInstrs(System.UInt32)">
<summary>
 Integer Saturating Arithmetic on page F4-2510
 Miscellaneous on page F4-2507
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseCyclRedundanyCheckInstrs(B2R2.FrontEnd.ARM32.Condition,System.UInt32)">
<summary>
 Cyclic Redundancy Check on page F4-2509
 Miscellaneous on page F4-2507
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseMoveSpecRegInstr(System.UInt32)">
<summary>
 Move special register (register) on page F4-2509
 Miscellaneous on page F4-2507
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseExcepGenInstrs(B2R2.FrontEnd.ARM32.Condition,System.UInt32)">
<summary>
 Exception Generation on page F4-2508
 Miscellaneous on page F4-2507
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseSynPrimitives(System.UInt32)">
<summary>
 Synchronization primitives and Load-Acquire/Store-Release on page F4-2506
 Data-processing and miscellaneous instructions on page F4-2502.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseExtraLoadStore(System.UInt32)">
<summary>
 Extra Load/Store on F4-2502
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseLoadStoreImm(System.UInt32)">
<summary>
 Load/Store Dual, Half, Signed byte (immediate, literal) on page F4-2504
 This section is decoded from Extra Load/Store on page F4-2502.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseLoadStoreReg(System.UInt32)">
<summary>
 Load/Store Dual, Half, Signed byte (register) on page F4-2503
 This section is decoded from Extra Load/Store on page F4-2502.
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.getSystemRegLoadStore(System.UInt32)">
<summary>
 System register Load/Store, page F4-2539
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.getSystemRegister64Bit(System.UInt32)">
<summary>
 System register 64-bit move, page F4-2538
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.getAdvSIMDNFloatLoadStore(System.UInt32)">
<summary>
 Advanced SIMD and floating-point Load/Store, page F4-2532
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.getAdvSIMDNFloat64Bit(System.UInt32)">
<summary>
 Advanced SIMD and floating-point 64-bit move, page F4-2532
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseBitfieldExtract(System.UInt32)">
<summary>
 Bitfield Extract, page F4-2528
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parsePermanentlyUndefined(B2R2.FrontEnd.ARM32.Condition,System.UInt32)">
<summary>
 Permanently UNDEFINED, page F4-2527
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseBitfieldInsert(System.UInt32)">
<summary>
 Bitfield Insert, page F4-2527
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.unsignedSumAbsoluteDiff(System.UInt32)">
<summary>
 Unsigned Sum of Absolute Differences, page F4-2527
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseSignedMultiplyDivide(System.UInt32)">
<summary>
 Signed multiply, Divide, page F4-2525
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseExtendAndAdd(System.UInt32)">
<summary>
 Extend and Add, page F4-2525
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseSaturate32Bit(System.UInt32)">
<summary>
 Saturate 32-bit, page F4-2524
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseReverseBitByte(System.UInt32)">
<summary>
 Reverse Bit/Byte, page F4-2524
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parseSaturate16Bit(System.UInt32)">
<summary>
 Saturate 16-bit, page F4-2524
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parserv8.parsePhrallelArithmetic(System.UInt32)">
<summary>
 Parallel Arithmetic, page F4-2522
</summary>
</member>
<member name="M:B2R2.FrontEnd.ARM32.Parser.parse(B2R2.BinReader,B2R2.FrontEnd.ParsingContext,B2R2.Architecture,System.UInt64,System.Int32)">
<summary>
 Read in bytes and return a parsed instruction for ARMv7. This function
 returns ARM32Instruction, which is a specialized type for 32-bit ARM. If you
 want to handle instructions in a platform-agnostic manner, you&apos;d better use
 the ARM32Parser class.
</summary>
</member>
<member name="T:B2R2.FrontEnd.ARM32.Parser">
<summary>
 ARMv7 instruction parser.
</summary>
</member>
</members>
</doc>

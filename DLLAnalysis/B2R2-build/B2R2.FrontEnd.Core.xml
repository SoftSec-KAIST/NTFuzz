<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>B2R2.FrontEnd.Core</name></assembly>
<members>
<member name="T:B2R2.BinIR.LowUIR.RegisterFactory">
<summary>
 RegisterFactory provides useful functions for accessing register information
 such as their IR expressions.
</summary>
</member>
<member name="M:B2R2.FrontEnd.StmtBuilder.ToStmts">
 <summary>
   Create an array of IR statements from the buffer.
 </summary>
 <returns>
   Returns a list of IR statements.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.StmtBuilder.Append(B2R2.BinIR.LowUIR.Stmt)">
 <summary>
   Append a new IR statement to the builder.
 </summary>
 <param name="stmt">IR statement to add.</param>
</member>
<member name="M:B2R2.FrontEnd.StmtBuilder.#ctor(System.Int32)">
 <summary>
   Initialize an IR statement builder of internal buffer size n.
 </summary>
 <param name="n">The size of the internal buffer.</param>
</member>
<member name="T:B2R2.FrontEnd.StmtBuilder">
<summary>
 StmtBuilder accumulates IR statements while lifting, and emits them into an
 array of statements at the end of a lifting process.
</summary>
</member>
<member name="T:B2R2.FrontEnd.ExprStack">
<summary>
 Stack for stack-based languages, such as EVM.
</summary>
</member>
<member name="F:B2R2.FrontEnd.TranslationContext.Endianness@">
<summary>
 The endianness.
</summary>
</member>
<member name="F:B2R2.FrontEnd.TranslationContext.WordBitSize@">
<summary>
 Word size in bits (RegType).
</summary>
</member>
<member name="P:B2R2.FrontEnd.TranslationContext.WordBitSize">
<summary>
 Word size in bits (RegType).
</summary>
</member>
<member name="P:B2R2.FrontEnd.TranslationContext.Endianness">
<summary>
 The endianness.
</summary>
</member>
<member name="M:B2R2.FrontEnd.TranslationContext.GetStack">
 <summary>
   Get the current stack instance.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.TranslationContext.GetRegVar(System.Int32)">
 <summary>
   Get register expression from a given register ID.
 </summary>
 <param name="id">Register ID.</param>
 <returns>
   Returns an IR expression of a register.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.TranslationContext.GetPseudoRegVar(System.Int32,System.Int32)">
 <summary>
   Get pseudo register expression from a given register ID and an index.
 </summary>
 <param name="id">Register ID.</param>
 <param name="idx">Register index.</param>
 <returns>
   Returns an IR expression of a pseudo-register.
 </returns>
</member>
<member name="T:B2R2.FrontEnd.TranslationContext">
<summary>
 A high-level interface for the translation context, which stores several
 states for translating/lifting instructions.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ParsingContext.InParallel@">
<summary>
 Indicate whether the next instruction should be executed in parallel. This
 is used by DSP architectures.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ParsingContext.CodeOffset@">
<summary>
 Indicate the address offset of the code. This is used in several
 architectures, such as EVM, to correctly resolve jump offsets in a
 dynamically generated code snippet.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ParsingContext.ITBlockStarted@">
<summary>
 Indicate whether an ITblock (in ARM) is started. This is true only when an
 IT hint instruction is encountered.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ParsingContext.ITState@">
<summary>
 ITState for ARM.
</summary>
</member>
<member name="F:B2R2.FrontEnd.ParsingContext.ArchOperationMode@">
<summary>
 Target architecture mode (e.g., ARM/thumb mode).
</summary>
</member>
<member name="P:B2R2.FrontEnd.ParsingContext.InParallel(System.Boolean)">
<summary>
 Indicate whether the next instruction should be executed in parallel. This
 is used by DSP architectures.
</summary>
</member>
<member name="P:B2R2.FrontEnd.ParsingContext.ITState(Microsoft.FSharp.Collections.FSharpList{System.Byte})">
<summary>
 ITState for ARM.
</summary>
</member>
<member name="P:B2R2.FrontEnd.ParsingContext.ITBlockStarted(System.Boolean)">
<summary>
 Indicate whether an ITblock (in ARM) is started. This is true only when an
 IT hint instruction is encountered.
</summary>
</member>
<member name="P:B2R2.FrontEnd.ParsingContext.CodeOffset(System.UInt64)">
<summary>
 Indicate the address offset of the code. This is used in several
 architectures, such as EVM, to correctly resolve jump offsets in a
 dynamically generated code snippet.
</summary>
</member>
<member name="P:B2R2.FrontEnd.ParsingContext.ArchOperationMode(B2R2.ArchOperationMode)">
<summary>
 Target architecture mode (e.g., ARM/thumb mode).
</summary>
</member>
<member name="P:B2R2.FrontEnd.ParsingContext.InParallel">
<summary>
 Indicate whether the next instruction should be executed in parallel. This
 is used by DSP architectures.
</summary>
</member>
<member name="P:B2R2.FrontEnd.ParsingContext.ITState">
<summary>
 ITState for ARM.
</summary>
</member>
<member name="P:B2R2.FrontEnd.ParsingContext.ITBlockStarted">
<summary>
 Indicate whether an ITblock (in ARM) is started. This is true only when an
 IT hint instruction is encountered.
</summary>
</member>
<member name="P:B2R2.FrontEnd.ParsingContext.CodeOffset">
<summary>
 Indicate the address offset of the code. This is used in several
 architectures, such as EVM, to correctly resolve jump offsets in a
 dynamically generated code snippet.
</summary>
</member>
<member name="P:B2R2.FrontEnd.ParsingContext.ArchOperationMode">
<summary>
 Target architecture mode (e.g., ARM/thumb mode).
</summary>
</member>
<member name="T:B2R2.FrontEnd.ParsingContext">
<summary>
 A high-level interface for the parsing context, which stores several states
 for parsing machine instructions.
</summary>
</member>
<member name="M:B2R2.FrontEnd.AsmWordBuilder.Finish">
 <summary>
   Create an array of AsmWords from the buffer.
 </summary>
 <returns>
   Returns an array of AsmWords.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.AsmWordBuilder.Append(B2R2.FrontEnd.AsmWord)">
 <summary>
   Append a new AsmWord to the builder.
 </summary>
 <param name="stmt">AsmWord to add.</param>
</member>
<member name="M:B2R2.FrontEnd.AsmWordBuilder.#ctor(System.Int32)">
 <summary>
   Initialize an IR statement builder of internal buffer size n.
 </summary>
 <param name="n">The size of the internal buffer.</param>
</member>
<member name="T:B2R2.FrontEnd.AsmWordBuilder">
<summary>
 Builder for an array of AsmWords.
</summary>
</member>
<member name="T:B2R2.FrontEnd.AsmWord">
<summary>
 We divide an assembly statement into a series of AsmWord, which represents a
 word (string) in the statement.
</summary>
</member>
<member name="F:B2R2.FrontEnd.AsmWordKind.String">
<summary>
 A simple string that can be ignored.
</summary>
</member>
<member name="F:B2R2.FrontEnd.AsmWordKind.Value">
<summary>
 A value (such as an immediate).
</summary>
</member>
<member name="F:B2R2.FrontEnd.AsmWordKind.Variable">
<summary>
 An variable (such as a register).
</summary>
</member>
<member name="F:B2R2.FrontEnd.AsmWordKind.Mnemonic">
<summary>
 An opcode.
</summary>
</member>
<member name="F:B2R2.FrontEnd.AsmWordKind.Address">
<summary>
 An address of the given instruction.
</summary>
</member>
<member name="T:B2R2.FrontEnd.AsmWordKind">
<summary>
 A kind of a term within an assembly statement.
</summary>
</member>
<member name="F:B2R2.FrontEnd.Instruction.WordSize@">
 <summary>
   The word size used for translating this instruction. Some architectures
   have several representations of their instruction sets depending on the
   word size. For example, Intel can be represented as either x86 or x86-64
   depending on the word size used. We store this information per
   instruction to distinguish specific instruction sets used.
 </summary>
</member>
<member name="F:B2R2.FrontEnd.Instruction.Length@">
 <summary>
   The length of this instruction in bytes.
 </summary>
</member>
<member name="F:B2R2.FrontEnd.Instruction.Address@">
 <summary>
   The address of this instruction.
 </summary>
</member>
<member name="P:B2R2.FrontEnd.Instruction.WordSize">
 <summary>
   The word size used for translating this instruction. Some architectures
   have several representations of their instruction sets depending on the
   word size. For example, Intel can be represented as either x86 or x86-64
   depending on the word size used. We store this information per
   instruction to distinguish specific instruction sets used.
 </summary>
</member>
<member name="P:B2R2.FrontEnd.Instruction.Length">
 <summary>
   The length of this instruction in bytes.
 </summary>
</member>
<member name="P:B2R2.FrontEnd.Instruction.Address">
 <summary>
   The address of this instruction.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.Instruction.Translate(B2R2.FrontEnd.TranslationContext)">
 <summary>
   Lift this instruction into a LowUIR given a translation context.
 </summary>
 <param name="ctxt">Translation context.</param>
 <returns>
   Returns an array of LowUIR statements.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.Instruction.IsRET">
 <summary>
   Is this a return instruction?
 </summary>
 <returns>
   Returns true if this is a return instruction.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.Instruction.IsNop">
 <summary>
   Is this a NO-OP instruction?
 </summary>
 <returns>
   Returns true if this instruction is a NO-OP.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.Instruction.IsInterrupt">
 <summary>
   Does this instruction involve an interrupt?
 </summary>
 <returns>
   Returns true if this is an interrupt instruction
 </returns>
</member>
<member name="M:B2R2.FrontEnd.Instruction.IsIndirectBranch">
 <summary>
   Is this an indirect branch instruction? An indirect branch instruction
   is a branch instruction with a symbolic jump target. Thus, the jump
   target is only computed at runtime.
 </summary>
 <returns>
   Returns true if this is an indirect branch instruction.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.Instruction.IsExit">
 <summary>
   Does this instruction exit a basic block? For example, this function
   returns true for the <c>HLT</c> instruction of Intel. We also consider
   system call instructions as an exit instruction.
 </summary>
 <returns>
   Returns true if this instruction is at the end of the corresponding
   basic block.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.Instruction.IsDirectBranch">
 <summary>
   Is this a direct branch instruction? A direct branch instruction is a
   branch instruction with a concrete jump target, which is inscribed in
   its operand. For example, <c>CALL ECX</c> is not a direct branch
   instruction, but <c>JMP +10</c> is.
 </summary>
 <returns>
   Returns true if this is a direct branch instruction.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.Instruction.IsCondBranch">
 <summary>
   Is this a conditional branch instruction?
 </summary>
 <returns>
   Returns true if this is a conditional branch instruction.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.Instruction.IsCall">
 <summary>
   Is this a call instruction?
 </summary>
 <returns>
   Returns true if this is a call instruction.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.Instruction.IsCJmpOnTrue">
 <summary>
   Is this a conditional branch instruction, and it jumps to the branch
   target when the predicate is true? For example, this method returns true
   for <c>JE</c> instructions of Intel, but false for <c>JNE</c>
   instructions.
 </summary>
 <returns>
   Returns true if this is a conditional branch instruction, and jumps to
   the target when the predicate is true.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.Instruction.IsBranch">
 <summary>
   Is this a branch instruction? A branch instruction includes any kinds of
   jump instructions, such as CALL/RET instructions, indirect/direct jump
   instructions, and conditional jump instructions.
 </summary>
 <returns>
   Returns true if this is a branch instruction.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.Instruction.InterruptNum(Microsoft.FSharp.Core.byref{System.Int64,Microsoft.FSharp.Core.ByRefKinds.InOut})">
 <summary>
   Return the interrupt number if this is an interrupt instruction.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.Instruction.IndirectTrampolineAddr(Microsoft.FSharp.Core.byref{System.UInt64,Microsoft.FSharp.Core.ByRefKinds.InOut})">
 <summary>
   Return a trampoline address of an indirect branch instruction if we can
   directly compute the address. For example, `JMP [RIP + 0x42]` is an
   indirect branch instruction, but we can compute the trampoline address
   as RIP is statically known anyways when PIC is off.
 </summary>
 <returns>
   Returns true if a trampoline address exists. Otherwise, returns false.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.Instruction.GetNextInstrAddrs">
 <summary>
   Return a sequence of possible next instruction addresses along with
   their ArchOperationMode. For branch instructions, the returned sequence
   includes jump target(s). For regular instructions, the sequence is a
   singleton of the fall-through address. This function does not resolve
   indirect branch targets.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.Instruction.Disasm">
 <summary>
   Disassemble this instruction without resolving symbols.
 </summary>
 <returns>
   Returns a disassembled string.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.Instruction.Disasm(System.Boolean,System.Boolean,B2R2.BinFile.FileInfo)">
 <summary>
   Disassemble this instruction.
 </summary>
 <param name="showAddr">
   Whether to show the instruction address in the resulting disassembly.
 </param>
 <param name="resolveSymbol">
   Whether to resolve symbols while disassembling the instruction. For
   example, when there is a call target, we the disassembled string will
   show the target function name if this parameter is true, and the symbol
   information exists.
 </param>
 <param name="fileInfo">
   File information that this instruction resides in.
 </param>
 <returns>
   Returns a disassembled string.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.Instruction.DirectBranchTarget(Microsoft.FSharp.Core.byref{System.UInt64,Microsoft.FSharp.Core.ByRefKinds.InOut})">
 <summary>
   Return a branch target address if we can directly compute it, i.e., for
   direct branches.
 </summary>
 <returns>
   Returns true if a target address exists. Otherwise, returns false.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.Instruction.Decompose">
 <summary>
   Decompose this instruction into AsmWords.
 </summary>
 <returns>
   Returns an array of AsmWords.
 </returns>
</member>
<member name="T:B2R2.FrontEnd.Instruction">
 <summary>
   A high-level class representing a single machine instruction in a
   platform-independent manner. It provides useful methods for accessing
   useful information about the instruction.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.Parser.Parse(B2R2.BinReader,B2R2.FrontEnd.ParsingContext,System.UInt64,System.Int32)">
<summary>
 Parse one instruction.
</summary>
</member>
<member name="T:B2R2.FrontEnd.Parser">
<summary>
 A platform-independent instruction parser.
</summary>
</member>
<member name="T:B2R2.FrontEnd.BitData32">
<summary>
 32-bit binary representation.
</summary>
</member>
<member name="T:B2R2.FrontEnd.ParsingFailureException">
<summary>
 This exception occurs when parsing binary code failed. This exception
 indicates a non-recoverable parsing failure.
</summary>
</member>
<member name="T:B2R2.FrontEnd.UnhandledRegExprException">
<summary>
 Encountered register expression that is yet handled in our IR.
</summary>
</member>
<member name="T:B2R2.FrontEnd.InvalidRegisterException">
<summary>
 Invalid register has been used during parsing/lifting.
</summary>
</member>
<member name="T:B2R2.FrontEnd.InvalidOpcodeException">
<summary>
 Invalid opcode has been used during parsing/lifting.
</summary>
</member>
<member name="T:B2R2.FrontEnd.InvalidOperandSizeException">
<summary>
 Invalid operand size has been used during parsing/lifting.
</summary>
</member>
<member name="T:B2R2.FrontEnd.InvalidOperandException">
<summary>
 Invalid use of operand has been encountered during parsing/lifting.
</summary>
</member>
<member name="T:B2R2.FrontEnd.NotImplementedIRException">
<summary>
 The IR is not implemented yet.
</summary>
</member>
</members>
</doc>

<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>B2R2.FrontEnd.Library</name></assembly>
<members>
<member name="M:B2R2.FrontEnd.BinHandler.UpdateCode(B2R2.FrontEnd.BinHandler,System.UInt64,System.Byte[])">
 <summary>
   Update BinHandler to have new code at a new address (addr). BinHandler
   is immutable.
 </summary>
 <param name="handler">The new address to use.</param>
 <param name="addr">The new address to use.</param>
 <param name="bs">The new address to use.</param>
 <returns>New BinHandler.</returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.TryParseInstr(B2R2.FrontEnd.BinHandler,System.UInt64)">
 <summary>
   Parse one instruction at the given address (addr) from the BinHandler,
   and return the corresponding instruction. This function does not raise
   an exception, but returns an option type.
 </summary>
 <param name="handler">BinHandler.</param>
 <param name="addr">The address.</param>
 <returns>
   Parsed instruction (option type).
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.ReadUInt(B2R2.FrontEnd.BinHandler,System.UInt64,System.Int32)">
 <summary>
   Return the corresponding unsigned integer value at the addr of the size
   from the given BinHandler.
 </summary>
 <param name="handler">BinHandler.</param>
 <param name="addr">The address.</param>
 <param name="size">The size of the integer in bytes. Maximum 8 bytes is
 possible.</param>
 <returns>
   Return the corresponding unsigned integer (uint64).
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.ReadUInt(System.UInt64,System.Int32)">
 <summary>
   Return the corresponding unsigned integer value at the addr of the size
   from the binary.
 </summary>
 <param name="addr">The address.</param>
 <param name="size">The size of the integer in bytes. Maximum 8 bytes is
 possible.</param>
 <returns>
   Return the corresponding unsigned integer (uint64).
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.ReadInt(B2R2.FrontEnd.BinHandler,System.UInt64,System.Int32)">
 <summary>
   Return the corresponding integer value at the addr of the size from the
   given BinHandler.
 </summary>
 <param name="handler">BinHandler.</param>
 <param name="addr">The address.</param>
 <param name="size">The size of the integer in bytes. Maximum 8 bytes is
 possible.</param>
 <returns>
   Return the corresponding integer (int64).
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.ReadInt(System.UInt64,System.Int32)">
 <summary>
   Return the corresponding integer value at the addr of the size from the
   current binary.
 </summary>
 <param name="addr">The address.</param>
 <param name="size">The size of the integer in bytes. Maximum 8 bytes is
 possible.</param>
 <returns>
   Return the corresponding integer (int64).
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.ReadBytes(B2R2.FrontEnd.BinHandler,System.UInt64,System.Int32)">
 <summary>
   Return the byte array of size (nBytes) at the addr from the given
   BinHandler.
 </summary>
 <param name="handler">BinHandler.</param>
 <param name="addr">The address.</param>
 <param name="nBytes">The size of the byte array (in bytes).</param>
 <returns>
   Return the byte array if succeed. Otherwise, raise an exception.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.ReadBytes(System.UInt64,System.Int32)">
 <summary>
   Return the byte array of size (nBytes) at the addr from the current
   binary.
 </summary>
 <param name="addr">The address.</param>
 <param name="nBytes">The size of the byte array (in bytes).</param>
 <returns>
   Return the byte array if succeed. Otherwise, raise an exception.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.ReadASCII(B2R2.FrontEnd.BinHandler,System.UInt64)">
 <summary>
   Return the ASCII string at the addr from the given BinHandler.
 </summary>
 <param name="handler">BinHandler.</param>
 <param name="addr">The address.</param>
 <returns>
   Return the corresponding ASCII string.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.ReadASCII(System.UInt64)">
 <summary>
   Return the ASCII string at the addr from the given BinHandler.
 </summary>
 <param name="addr">The address.</param>
 <returns>
   Return the corresponding ASCII string.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.ParseInstr(B2R2.FrontEnd.BinHandler,System.UInt64)">
 <summary>
   Parse one instruction at the given address (addr) from the BinHandler,
   and return the corresponding instruction. This function raises an
   exception if the parsing process failed.
 </summary>
 <param name="handler">BinHandler.</param>
 <param name="addr">The address.</param>
 <returns>
   Parsed instruction.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.ParseBBlockWithAddr(B2R2.FrontEnd.BinHandler,System.UInt64)">
<summary>
 Parse a basic block from the given address, and return the sequence of the
 instructions of the basic block and next address to parse. This function
 may return an incomplete basic block as an Error type with error address.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.ParseBBlock(B2R2.FrontEnd.BinHandler,System.UInt64)">
<summary>
 Parse a basic block from the given address, and return the sequence of the
 instructions of the basic block. This function may return an incomplete
 basic block as an Error type.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.Optimize(B2R2.BinIR.LowUIR.Stmt[])">
 <summary>
 Return optimized statements from the given statements.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.LiftInstr(B2R2.FrontEnd.BinHandler,B2R2.FrontEnd.Instruction)">
<summary>
 Lift a parsed instruction (Instruction) to produce an array of IR
 statements from a given BinHandler.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.LiftIRBBlock``1(B2R2.FrontEnd.BinHandler,System.UInt64)">
<summary>
 Return the lifted IR (an array of statements) of a basic block at the
 given address. This function returns a partial bblock with Error, if the
 parsing of the bblock was not successful. Unlike liftBBlock where the end
 of a basic block is decided by insInfo, liftIRBBlock decides the end of a
 basic block when any branch IR statement is encountered. This means that
 control flows within complex instructions like rep are reflected in
 splitting basic blocks.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.LiftBBlock(B2R2.FrontEnd.BinHandler,System.UInt64)">
<summary>
 Return the lifted IR (an array of statements) of a basic block at the
 given address. This function returns a partial bblock with Error, if the
 parsing of the bblock was not successful.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.Init(B2R2.ISA)">
 <summary>
   Initialize an empty BinHandler solely from an ISA, assuming that the
   archMode is NoMode, and the format is RawBinary. This function is useful
   when you want to delay loading the actual body of your binary blob.
 </summary>
 <param name="isa">ISA.</param>
 <returns>BinHandler.</returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.Init(B2R2.ISA,B2R2.ArchOperationMode)">
 <summary>
   Initialize an empty BinHandler. This function is useful when you want to
   delay loading the actual body of your binary blob.
 </summary>
 <param name="isa">ISA.</param>
 <param name="archMode">ArchOperatinoMode.</param>
 <returns>BinHandler.</returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.Init(B2R2.ISA,System.Byte[])">
 <summary>
   Initialize a BinHandler from an ISA and a byte sequence, assuming that
   the archMode is NoMode, and the format is RawBinary.
 </summary>
 <param name="isa">ISA.</param>
 <param name="bytes">Byte sequence.</param>
 <returns>BinHandler.</returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.Init(B2R2.ISA,System.String)">
 <summary>
   Initialize a BinHandler from an ISA and a binary file path, assuming
   that the archMode is NoMode. B2R2 will automatically detect the file
   format of the given binary file, but it will refer to the given ISA
   parameter either when the binary has multiple architectures, e.g., a fat
   binary on macOS, or when B2R2 cannot recognize the given file format. If
   the given binary file does not follow the known formats, then B2R2
   consider it as a raw binary with base address at 0.
 </summary>
 <param name="isa">ISA.</param>
 <param name="fileName">Binary file path.</param>
 <returns>BinHandler.</returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.Init(B2R2.ISA,B2R2.ArchOperationMode,System.Boolean,System.UInt64,System.String)">
 <summary>
   Initialize a BinHandler from a given binary file (fileName). This
   function will read the file and parse it. It will automatically detect
   the file format if autoDetect is true. Otherwise, it will cnosider the
   file as a raw binary.
 </summary>
 <param name="isa">ISA.</param>
 <param name="archMode">ArchOperatinoMode.</param>
 <param name="autoDetect">Whether to perform auto format detection.</param>
 <param name="baseAddr">Base address for calculating instruction
 addresses.</param>
 <param name="fileName">Binary file.</param>
 <returns>BinHandler.</returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.Init(B2R2.ISA,B2R2.ArchOperationMode,System.Boolean,System.UInt64,System.Byte[])">
 <summary>
   Initialize a BInHnalder from a given binary byte sequence. This function
   will read the byte sequence and automatically detect its binary format
   if autoDetect is true. Otherwise, it will consider the given binary
   sequence as a raw binary (just a series of machine instructions without
   specific file format).
 </summary>
 <param name="isa">ISA.</param>
 <param name="archMode">ArchOperatinoMode.</param>
 <param name="autoDetect">Perform auto format detection or not.</param>
 <param name="baseAddr">Base address for calculating instruction
 addresses.</param>
 <param name="bytes">Raw binary sequence.</param>
 <returns>BinHandler.</returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.DisasmInstrSimple(B2R2.FrontEnd.Instruction)">
 <summary>
   Return a disassembled string from the parsed instruction. This function
   returns a simplified disassembly, which does not contain the instruction
   address nor symbols.
 </summary>
 <param name="handler">BinHandler.</param>
 <param name="ins">The instruction to disassemble.</param>
 <returns>
   Disassembled string.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.DisasmInstr(B2R2.FrontEnd.BinHandler,System.Boolean,System.Boolean,B2R2.FrontEnd.Instruction)">
 <summary>
   Return a disassembled string from the parsed instruction.
 </summary>
 <param name="handler">BinHandler.</param>
 <param name="showAddr">Whether to show the instruction address or
 not.</param>
 <param name="resolveSymbol">Whether to resolve symbols while disassembling
 the instruction.</param>
 <param name="ins">The instruction to disassemble.</param>
 <returns>
   Disassembled string.
 </returns>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.DisasmBBlock(B2R2.FrontEnd.BinHandler,System.Boolean,System.Boolean,System.UInt64)">
 <summary>
   Return the disassembled string for a basic block starting at the given
   address along with the fall-through address of the block. This function
   returns a partial disassembly if parsing of the bblock was not
   successful.
 </summary>
</member>
<member name="M:B2R2.FrontEnd.BinHandler.CreateLiftBBlockTask(B2R2.FrontEnd.BinHandler,System.UInt64,System.Boolean,Microsoft.FSharp.Core.byref{System.UInt64,Microsoft.FSharp.Core.ByRefKinds.InOut})">
 <summary>
 Return the task that lift a basic block and next address.
 The task return the lifted IR (an array of statements) and boolean value
 that indicate whether parsing of the bblock was successful or not.
 </summary>
</member>
<member name="T:B2R2.FrontEnd.BinHandler">
<summary>
 The main handler for reading/parsing a binary code. BinHandler essentially
 represents a chunk of binary code either from a string or from an actual
 binary file.
</summary>
</member>
<member name="M:B2R2.FrontEnd.BinHandlerHelper.classifyRanges(B2R2.AddrRange,System.Collections.Generic.IEnumerable{B2R2.AddrRange})">
<summary>
 Classify ranges to be either in-file or not-in-file. The second parameter
 (notinfiles) is a sequence of (exclusive) ranges within the myrange, which
 represent the not-in-file ranges. This function will simply divide the
 myrange into subranges where each subrange is labeled with either true or
 false, where true means in-file, and false means not-in-file.
</summary>
</member>
</members>
</doc>
